% This file was created with JabRef 2.4.2.
% Encoding: MacRoman

@ARTICLE{Aherne98a,
  author = {F.J. Aherne and N.A. Thacker and Peter Rockett},
  title = {{The Bhattacharyya Metric as an Absolute Similarity Measure for Frequency
	Coded Data}},
  journal = {Kybernetika},
  year = {1998},
  volume = {34},
  pages = {363--368},
  number = {4},
  abstract = {This paper highlights advantageous properties of theBhattacharyya
	metric over the chi-squared statistic for comparing frequency distributed
	data. The original interpretation of the Bhattacharyya metric as
	a geometric similarity measure is reviewed and it is pointed out
	that this derivation is independent of the use of the Bhattacharyya
	measure as an upper bound on the probability of misclassification
	in a two-class problem. The affinity between the Bhattacharyya and
	Matusita measures is described and we suggest use of the Bhattacharyya
	measure for comparing histogram data. We explain how the chi-squared
	statistic compensates for the implicit assumption of a Euclidean
	distance measure being the shortest path between two points in high
	dimensional space. By using the square-root transformation the Bhattacharyya
	metric requires no such standardization and by its multiplicative
	nature has no singularity problems unlike those caused by the denominator
	of the chi-squared statistic with zero count-data.},
  publisher = {TIA, Prague}
}

@article{Arisholm06a,
  title={{Empirical Assessment of the Impact of Structural Properties on the Changeability of Object-Oriented Software}},
  author={Arisholm, E.},
  journal={Information and Software Technology},
  volume={48},
  number={11},
  pages={1046--1055},
  year={2006},
  publisher={Elsevier}
}

@ARTICLE{Akaike74a,
  author = {Akaike, H.},
  title = {{A New Look at the Statistical Model Identification}},
  journal = {IEEE Transactions on Automatic Control},
  year = {1974},
  volume = {19},
  pages = {716--723},
  number = {6}
}

@INPROCEEDINGS{Alam07a,
  author = {Alam, S. and Dugerdil, P.},
  title = {{Evospaces Visualization Tool: Exploring Software Architecture in 3D}},
  booktitle = {Proceedings of 14th Working Conference on Reverse Engineering (WCRE'2007)},
  year = {2007},
  pages = {269--270},
  organization = {IEEE}
}

@BOOK{Ambler02a,
  title = {{Agile Modeling}},
  publisher = {J. Wiley New York},
  year = {2002},
  author = {Ambler, S.W.}
}

@BOOK{Anderson04a,
  title = {{Agile Management for Software Engineering: Applying the Theory of
	Constraints for Business Results}},
  publisher = {Prentice Hall},
  year = {2004},
  author = {Anderson, D.J.}
}

@ARTICLE{Anton03a,
  author = {Anton, AI and Potts, C.},
  title = {{Functional Palaeontology: The Evolution of User-visible System Services}},
  journal = {IEEE Transactions on Software Engineering},
  year = {2003},
  volume = {29},
  pages = {151--166},
  number = {2}
}

@INPROCEEDINGS{Antoniol00c,
  author = {Giuliano Antoniol and Gerardo Canfora and Gerardo Casazza and Andrea
	{De Lucia}},
  title = {{Information Retrieval Models for Recovering Traceability Links Between
	Code and Documentation}},
  booktitle = {Proceedings of the International Conference on Software Maintenance (ICSM'00)},
  year = {2000},
  pages = {40--49},
  bdsk-url-1 = {http://dx.doi.org/10.1109/ICSM.2000.883003},
  doi = {10.1109/ICSM.2000.883003}
}

@ARTICLE{Antoniol02a,
  author = {Antoniol, G. and Villano, U. and Merlo, E. and Di Penta, M.},
  title = {{Analyzing Cloning Evolution in the Linux Kernel}},
  journal = {Information and Software Technology},
  year = {2002},
  volume = {44},
  pages = {755--765},
  number = {13},
  publisher = {Elsevier}
}

@CONFERENCE{Anton01a,
  author = {Ant{\'o}n, A.I. and Potts, C.},
  title = {{Functional Palaeontology: System Evolution as the User Sees It}},
  booktitle = {Proceedings of the 23rd International Conference on Software Engineering (ICSM'01)},
  year = {2001},
  pages = {421--430},
  organization = {IEEE Computer Society}
}

@INPROCEEDINGS{Aoyama02a,
  author = {Aoyama, Mikio},
  title = {{Metrics and Analysis of Software Architecture Evolution With Discontinuity}},
  booktitle = {Proceedings of the International Workshop on Principles
	of Software Evolution (IWPSE'02)},
  year = {2002},
  pages = {103--107},
  address = {New York, NY, USA},
  publisher = {ACM},
  bdsk-url-1 = {http://portal.acm.org/ft_gateway.cfm?id=512059&type=pdf&coll=GUIDE&dl=GUIDE&CFID=67634275&CFTOKEN=39911982},
  bdsk-url-2 = {http://doi.acm.org/10.1145/512035.512059},
  date-added = {2009-12-10 16:23:26 +1100},
  date-modified = {2009-12-10 16:23:40 +1100},
  doi = {http://doi.acm.org/10.1145/512035.512059},
  isbn = {1-58113-545-9},
  location = {Orlando, Florida},
  url = {http://portal.acm.org/ft_gateway.cfm?id=512059&type=pdf&coll=GUIDE&dl=GUIDE&CFID=67634275&CFTOKEN=39911982}
}

@CONFERENCE{Apiwattanapong04a,
  author = {Apiwattanapong, T. and Orso, A. and Harrold, MJ},
  title = {{A Differencing Algorithm for Object-Oriented Programs}},
  booktitle = {Proceedings of the 19th International Conference on Automated Software Engineering},
  year = {2004},
  pages = {2--13}
}

@BOOK{Arthur88a,
  title = {{Software Evolution}},
  publisher = {Wiley New York},
  year = {1988},
  author = {Arthur, L.J.}
}

@ARTICLE{Arthur99a,
  author = {Arthur, W.B.},
  title = {{Complexity and the Economy}},
  journal = {Science},
  year = {1999},
  volume = {284},
  pages = {107},
  number = {5411},
  publisher = {AAAS}
}

@CONFERENCE{Aversano07a,
  author = {Aversano, L. and Canfora, G. and Cerulo, L. and Del Grosso, C. and
	Di Penta, M.},
  title = {{An Empirical Study on the Evolution of Design Patterns}},
  booktitle = {Proceedings of the 6th Joint Meeting of the European Software
	Engineering Conference and the ACM SIGSOFT Symposium on the Foundations
	of Software Engineering},
  year = {2007},
  pages = {394},
  organization = {ACM}
}

@ARTICLE{Baddeley00a,
  author = {Baddeley, A.},
  title = {{The Episodic Buffer: A New Component of Working Memory?}},
  journal = {Trends in Cognitive Sciences},
  year = {2000},
  volume = {4},
  pages = {417--423},
  number = {11},
  publisher = {Elsevier}
}

@ARTICLE{Baddeley98a,
  author = {Baddeley, A.},
  title = {{Working memory}},
  journal = {Comptes Rendus de l'Academie des Sciences Series III Sciences de la Vie},
  year = {1998},
  volume = {321},
  pages = {167--173},
  number = {2-3},
  publisher = {Elsevier}
}

@ARTICLE{Bak93a,
  author = {Bak, P. and Sneppen, K.},
  title = {{Punctuated Equilibrium and Criticality in a Simple Model of Evolution}},
  journal = {Physical Review Letters},
  year = {1993},
  volume = {71},
  pages = {4083--4086},
  number = {24},
  publisher = {APS}
}

@ARTICLE{Bandi03a,
  author = {Bandi, R.K. and Vaishnavi, V.K. and Turk, D.E.},
  title = {{Predicting Maintenance Performance Using Object-Oriented Design Complexity Metrics}},
  year = {2003},
  abstract = {The Object-Oriented (OO) paradigm has become increasingly popular
	in recent years. Researchers agree that, although maintenance may
	turn out to be easier for OO systems, it is unlikely that the maintenance
	burden will completely disappear. One approach to controlling software
	maintenance costs is the utilization of software metrics during the
	development phase, to help identify potential problem areas. Many
	new metrics have been proposed for OO systems, but only a few of
	them have been validated. The purpose of this research is to empirically
	explore the validation of three existing OO design complexity metrics
	and, specifically, to assess their ability to predict maintenance
	time. This research reports the results of validating three metrics,
	Interaction Level (IL), Interface Size (IS), and Operation Argument
	Complexity (OAC). A controlled experiment was conducted to investigate
	the effect of design complexity (as measured by the above metrics)
	on maintenance time. Each of the three metrics by itself was found
	to be useful in the experiment in predicting maintenance performance.},
  bdsk-file-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAs4AAAAAAs4AAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMb/ydVIKwAAAA+a5h9CYW5kaSAwMyAtIFRTRSAtIFByZWQjRjlBRkIucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD5r7wudqogAAAAAAAAAAAAIABQAACSAAAAAAAAAAAAAAAAAAAAAJRXZvbHV0aW9uAAAQAAgAAMb/LyUAAAARAAgAAMLm3gIAAAABABgAD5rmAA+azgAPl9wAD26uAA5LHAAOSKsAAgBmTWFjaW50b3NoIEhEOlVzZXJzOnJ2YXNhOkRvY3VtZW50czpSZXNlYXJjaDpQYXBlciBDb2xsZWN0aW9uOkV2b2x1dGlvbjpCYW5kaSAwMyAtIFRTRSAtIFByZWQjRjlBRkIucGRmAA4AvgBeAEIAYQBuAGQAaQAgADAAMwAgAC0AIABUAFMARQAgAC0AIABQAHIAZQBkAGkAYwB0AGkAbgBnACAAbQBhAGkAbgB0AGUAbgBhAG4AYwBlACAAcABlAHIAZgBvAHIAbQBhAG4AYwBlACAAdQBzAGkAbgBnACAAbwBvACAAZABlAHMAaQBnAG4AIABjAG8AbQBwAGwAZQB4AGkAdAB5ACAAbQBlAHQAcgBpAGMAcwAuAHAAZABmAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgCYVXNlcnMvcnZhc2EvRG9jdW1lbnRzL1Jlc2VhcmNoL1BhcGVyIENvbGxlY3Rpb24vRXZvbHV0aW9uL0JhbmRpIDAzIC0gVFNFIC0gUHJlZGljdGluZyBtYWludGVuYW5jZSBwZXJmb3JtYW5jZSB1c2luZyBvbyBkZXNpZ24gY29tcGxleGl0eSBtZXRyaWNzLnBkZi5wZGYAEwABLwAAFQACAAz//wAAgAXSHB0eH1gkY2xhc3Nlc1okY2xhc3NuYW1lox8gIV1OU011dGFibGVEYXRhVk5TRGF0YVhOU09iamVjdF8Qki4uLy4uL0RvY3VtZW50cy9SZXNlYXJjaC9QYXBlciBDb2xsZWN0aW9uL0V2b2x1dGlvbi9CYW5kaSAwMyAtIFRTRSAtIFByZWRpY3RpbmcgbWFpbnRlbmFuY2UgcGVyZm9ybWFuY2UgdXNpbmcgb28gZGVzaWduIGNvbXBsZXhpdHkgbWV0cmljcy5wZGYucGRm0hwdJCWiJSFcTlNEaWN0aW9uYXJ5EgABhqBfEA9OU0tleWVkQXJjaGl2ZXIACAARABYAHwAoADIANQA6ADwARQBLAFIAXQBlAGwAbwBxAHMAdgB4AHoAfACGAJMAmACgA3IDdAN5A4IDjQORA58DpgOvBEQESQRMBFkEXgAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAARw},
  keywords = {Metrics, Maintenance},
  publisher = {IEEE Computer Society}
}

@ARTICLE{Banker93a,
  author = {Rajiv D. Banker and Srikanr M. Datar and Chris F. Kemerer and and
	Dani Zweig},
  title = {{Software Complexity and Maintenance Costs}},
  journal = {Communications of the ACM},
  year = {1993},
  volume = {36},
  pages = {81--94},
  number = {11},
  month = {November},
  bdsk-file-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAlYAAAAAAlYAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMb/ydVIKwAAAA+a5h9CYW5rZXIgLSBTb2Z0d2FyZSBDb20jRjlBRkUucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD5r+AAAAAAAAAAAAAAAAAAIABQAACSAAAAAAAAAAAAAAAAAAAAAJRXZvbHV0aW9uAAAQAAgAAMb/LyUAAAARAAgAAAAAAAAAAAABABgAD5rmAA+azgAPl9wAD26uAA5LHAAOSKsAAgBmTWFjaW50b3NoIEhEOlVzZXJzOnJ2YXNhOkRvY3VtZW50czpSZXNlYXJjaDpQYXBlciBDb2xsZWN0aW9uOkV2b2x1dGlvbjpCYW5rZXIgLSBTb2Z0d2FyZSBDb20jRjlBRkUucGRmAA4AbgA2AEIAYQBuAGsAZQByACAALQAgAFMAbwBmAHQAdwBhAHIAZQAgAEMAbwBtAHAAbABlAHgAaQB0AHkAIABhAG4AZAAgAE0AYQBpAG4AdABlAG4AYQBuAGMAZQAgAEMAbwBzAHQAcwAuAHAAZABmAA8AGgAMAE0AYQBjAGkAbgB0AG8AcwBoACAASABEABIAcFVzZXJzL3J2YXNhL0RvY3VtZW50cy9SZXNlYXJjaC9QYXBlciBDb2xsZWN0aW9uL0V2b2x1dGlvbi9CYW5rZXIgLSBTb2Z0d2FyZSBDb21wbGV4aXR5IGFuZCBNYWludGVuYW5jZSBDb3N0cy5wZGYAEwABLwAAFQACAAz//wAAgAXSHB0eH1gkY2xhc3Nlc1okY2xhc3NuYW1lox8gIV1OU011dGFibGVEYXRhVk5TRGF0YVhOU09iamVjdF8Qai4uLy4uL0RvY3VtZW50cy9SZXNlYXJjaC9QYXBlciBDb2xsZWN0aW9uL0V2b2x1dGlvbi9CYW5rZXIgLSBTb2Z0d2FyZSBDb21wbGV4aXR5IGFuZCBNYWludGVuYW5jZSBDb3N0cy5wZGbSHB0kJaIlIVxOU0RpY3Rpb25hcnkSAAGGoF8QD05TS2V5ZWRBcmNoaXZlcgAIABEAFgAfACgAMgA1ADoAPABFAEsAUgBdAGUAbABvAHEAcwB2AHgAegB8AIYAkwCYAKAC+gL8AwEDCgMVAxkDJwMuAzcDpAOpA6wDuQO+AAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAA9A=},
  date-modified = {2008-07-17 12:29:05 +1000},
  keywords = {Complexity, Maintenance},
  read = {Yes}
}

@ARTICLE{Barabasi99a,
  author = {Barab{\'a}si, A.L. and Albert, R.},
  title = {{Emergence of Scaling in Random Networks}},
  journal = {Science},
  year = {1999},
  volume = {286},
  pages = {509},
  number = {5439},
  publisher = {AAAS}
}

@ARTICLE{Barry03a,
  author = {Barry, E.J. and Kemerer, C.F. and Slaughter, S.A.},
  title = {{On the Uniformity of Software Evolution Patterns}},
  journal = {Proceedings of the 25th International Conference
	on Software Engineering (ICSE'03)},
  year = {2003},
  pages = {106-113},
  month = {May},
  bdsk-url-1 = {http://dx.doi.org/10.1109/ICSE.2003.1201192},
  doi = {10.1109/ICSE.2003.1201192},
  issn = {0270-5257},
  keywords = {program debugging, software engineering long-lived software systems,
	software engineering community, software evolution patterns, software
	lifecycle evolution, software volatility}
}

@ARTICLE{Basili96a,
  author = {Basili, VR and Briand, LC and Melo, WL},
  title = {{A Validation of Object-Oriented Design Metrics as Quality Indicators}},
  journal = {IEEE Transactions on Software Engineering},
  year = {1996},
  volume = {22},
  pages = {751--761},
  number = {10}
}

@ARTICLE{Basili83a,
  author = {Basili, VR and Hutchens, DH},
  title = {{An Empirical Study of a Syntactic Complexity Family}},
  journal = {IEEE Transactions on Software Engineering},
  year = {1983},
  pages = {664--672}
}

@ARTICLE{Basili84a,
  author = {Victor R. Basili and Barry T. Perricone},
  title = {{Software Errors and Complexity: An Empirical Investigation}},
  journal = {Communications of the ACM},
  year = {1984},
  volume = {27},
  pages = {42--52},
  number = {1},
  month = jan,
  abstract = {An analysis of the distributions and relationships derived from the
	change data collected during development of a medium-scale software
	project produces some surprising insights into the factors influencing
	software development. Among these are the tradeoffs between modifying
	an existing module as opposed to creating a new one, and the relationship
	between module size and error proneness.},
  address = {New York, NY, USA},
  bdsk-url-1 = {http://dx.doi.org/10.1145/69605.2085},
  doi = {10.1145/69605.2085},
  publisher = {ACM Press}
}

@INPROCEEDINGS{Baxter06a,
  author = {Baxter, G. and Frean, M. and Noble, J. and Rickerby, M. and Smith,
	H. and Visser, M. and Melton, H. and Tempero, E.},
  title = {{Understanding the Shape of Java Software}},
  booktitle = {Proceedings of the 21st Annual ACM SIGPLAN Conference on Object-Oriented
	Programming Languages, Systems, and Applications},
  year = {2006},
  pages = {397--412},
  keywords = {Java, Metrics},
  publisher = {ACM Press New York, USA}
}

@INPROCEEDINGS{Baxter98a,
  author = {Ira Baxter and Andrew Yahin and Leonardo Moura and Marcelo Sant'
	Anna and Lorraine Bier},
  title = {{Clone Detection Using Abstract Syntax Trees}},
  booktitle = {Proceedings of the International Conference on Software Maintenance
	(ICSM 1998)},
  year = {1998},
  pages = {368-377},
  publisher = {IEEE Computer Society, Washington, DC, USA},
  bdsk-url-1 = {http://dx.doi.org/10.1109/ICSM.1998.738528},
  doi = {10.1109/ICSM.1998.738528},
  keywords = {clones}
}

@BOOK{Beck04a,
  title = {{Extreme Programming Explained: Embrace Change}},
  publisher = {Addison-Wesley Professional},
  year = {2004},
  author = {Beck, K. and Andres, C.}
}

@ARTICLE{Bengal03,
  author = {Ben-Gal, I.},
  title = {{Outlier Detection}},
  journal = {The Data Mining and Knowledge Discovery Handbook},
  year = {2005},
  pages = {131--146},
  publisher = {Springer-Verlag}
}

@ARTICLE{Benestad09a,
  author = {Benestad, H.C. and Anda, B. and Arisholm, E.},
  title = {{Understanding Software Maintenance and Evolution by Analyzing Individual
	Changes: A Literature Review}},
  journal = {Journal of Software Maintenance and Evolution: Research and Practice},
  year = {2009},
  volume = {21},
  pages = {349--378},
  number = {6},
  publisher = {John Wiley \& Sons}
}

@INPROCEEDINGS{Bennett00a,
  author = {Bennett, K.H. and Rajlich, V.T.},
  title = {{Software Maintenance and Evolution: A Roadmap}},
  booktitle = {Proceedings of the Conference on The Future of Software Engineering},
  year = {2000},
  pages = {73--87},
  publisher = {ACM New York, NY, USA}
}

@ARTICLE{Bergel05a,
  author = {Bergel, Alexandre and Ducasse, St{\'e}phane and Nierstrasz, Oscar
	and Wuyts, Roel},
  title = {{Classboxes: Controlling Visibility of Class Extensions}},
  journal = {Journal of Computer Languages, Systems and Structures},
  year = {2005},
  volume = {31},
  pages = {107--126},
  number = {3--4},
  month = may,
  abstract = {A class extension is a method that is defined in a module, but whose
	class is defined elsewhere. Class extensions offer a convenient way
	to incrementally modify existing classes when subclassing is inappropriate.
	Unfortunately existing approaches suffer from various limitations.
	Either class extensions have a global impact, with possibly negative
	effects for unexpected clients, or they have a purely local impact,
	with negative results for collaborating clients. Furthermore, conflicting
	class extensions are either disallowed, or resolved by linearization,
	with consequent negative effects. To solve these problems we present
	classboxes, a module system for object-oriented languages that provides
	for method addition and replacement. Moreover, the changes made by
	a classbox are only visible to that classbox (or classboxes that
	import it), a feature we call local rebinding. To validate the model
	we have implemented it in the Squeak Smalltalk environment, and performed
	benchmarks.},
  keywords = {olit oobib scg-pub jb05 classbox snf05},
  location = {Privat},
  publisher = {Elsevier},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Berg05aclassboxesJournal.pdf http://dx.doi.org/10.1016/j.cl.2004.11.002}
}

@INPROCEEDINGS{Bieman03a,
  author = {Bieman, JM and Andrews, AA and Yang, HJ},
  title = {{Understanding Change-proneness in Object Oriented Software Through
	Visualization}},
  booktitle = {Proceedings of the 11th IEEE International Workshop on Program Comprehension},
  year = {2003},
  pages = {44--53},
  abstract = {During software evolution, adaptive, and corrective maintenance are
	common reasons for changes. Often such changes cluster around key
	components. It is therefore important to analyze the frequency of
	changes to individual classes, but, more importantly, to also identify
	and show related changes in multiple classes. Frequent changes in
	clusters of classes may be due to their importance, due to the underlying
	architecture or due to chronic problems. Knowing where those change-prone
	clusters are can help focus attention, identify targets for re-engineering
	and thus provide product-based information to steer maintenance processes.
	This paper describes a method to identify and visualize classes and
	class interactions that are the most change-prone. The method was
	applied to a commercial embedded, real-time software system. It is
	object-oriented software that was developed using design patterns.},
  date-modified = {2008-05-26 12:55:39 +1000}
}

@INPROCEEDINGS{Bieman03b,
  author = {Bieman, JM and Straw, G. and Wang, H. and Munger, PW and Alexander,
	RT},
  title = {{Design Patterns and Change Proneness: An Examination Of Five Evolving
	Systems}},
  booktitle = {Proceedings of the 9th International Software Metrics Symposium},
  year = {2003},
  pages = {40--49}
}

@BOOK{Binder99a,
  title = {{Testing Object-Oriented Systems: Models, Patterns, and Tools}},
  publisher = {Addison-Wesley Professional},
  year = {1999},
  author = {Binder, R.}
}

@ARTICLE{Bookstein90a,
  author = {Bookstein, A.},
  title = {{Informetric Distributions, Part I: Unified Overview}},
  journal = {Journal of the American Society for Information Science},
  year = {1990},
  volume = {41},
  pages = {368--375},
  number = {5}
}

@ARTICLE{Briand96a,
  author = {Briand, L. and Emam, K.E. and Morasca, S.},
  title = {{On the Application of Measurement Theory in Software Engineering}},
  journal = {Empirical Software Engineering},
  year = {1996},
  volume = {1},
  pages = {61--88},
  number = {1},
  publisher = {Springer}
}

@ARTICLE{Briand00a,
  author = {Briand, L.C. and W{\"u}st, J. and Daly, J.W. and Victor Porter, D.},
  title = {{Exploring the Relationships Between Design Measures and Software
	Quality in Object-Oriented Systems}},
  journal = {The Journal of Systems and Software},
  year = {2000},
  volume = {51},
  pages = {245--273},
  number = {3},
  abstract = {One goal of this paper is to empirically explore the relationships
	between existing object-oriented (OO) coupling, cohesion, and inheritance
	measures and the probability of fault detection in system classes
	during testing. In other words, we wish to better understand the
	relationship between existing design measurement in OO systems and
	the quality of the software developed. The second goal is to propose
	an investigation and analysis strategy to make these kind of studies
	more repeatable and comparable, a problem which is pervasive in the
	literature on quality measurement. Results show that many of the
	measures capture similar dimensions in the data set, thus reflecting
	the fact that many of them are based on similar principles and hypotheses.
	However, it is shown that by using a subset of measures, accurate
	models can be built to predict which classes most of the faults are
	likely to lie in. When predicting fault-prone classes, the best model
	shows a percentage of correct classifications higher than 80% and
	finds more than 90% of faulty classes. Besides the size of classes,
	the frequency of method invocations and the depth of inheritance
	hierarchies seem to be the main driving factors of fault-proneness.},
  publisher = {Elsevier}
}

@ARTICLE{Brooks03a,
  author = {Brooks Jr, F.P.},
  title = {{Three Great Challenges for Half-Century-Old Computer Science}},
  journal = {Journal of the ACM (JACM)},
  year = {2003},
  volume = {50},
  pages = {25--26},
  number = {1},
  abstract = {Quantification of Structural Information, Software Estimation and
	UI design for Computer systems},
  publisher = {ACM Press New York, NY, USA}
}

@BOOK{Bruegge09a,
  title = {{Object Oriented Software Engineering}},
  publisher = {Prentice Hall},
  year = {2009},
  author = {Bruegge, B. and Dutoit, A.H.}
}

@BOOK{Bruegge04a,
  title = {{Object-Oriented Software Engineering Using UML, Patterns, and Java
	Second Edition}},
  publisher = {Prentice-Hall},
  year = {2004},
  author = {Bruegge, Bernd and Dutoit, Allen H.},
  date-modified = {2008-05-26 12:53:16 +1000},
  keywords = {oose scglib}
}

@ARTICLE{Buchanan09a,
  author = {Buchanan, M.},
  title = {{Meltdown Modelling. Could Agent Based Models Prevent Another Financial
	Crisis?}},
  journal = {Nature},
  year = {2009},
  volume = {460},
  pages = {680--682},
  number = {7256},
  publisher = {Nature Publishing}
}

@ARTICLE{Calefato04a,
  author = {Calefato, F. and Lanubile, F. and Mallardo, T.},
  title = {{Function Clone Detection in Web Applications: A Semiautomated Approach}},
  journal = {Journal of Web Engineering},
  year = {2004},
  volume = {3},
  pages = {3--21}
}

@INPROCEEDINGS{Capiluppi03c,
  author = {Andrea Capiluppi},
  title = {{Models for the evolution of {OS} projects}},
  booktitle = {Proceedings International Conference on Software Maintenance (ICSM
	2003)},
  year = {2003},
  pages = {65--74},
  address = {Los Alamitos CA},
  publisher = {IEEE Computer Society Press},
  keywords = {evolution}
}

@INPROCEEDINGS{Capiluppi08a,
  author = {Capiluppi, A. and Boldyreff, C.},
  title = {{Identifying and Improving Reusability Based on Coupling Patterns}},
  booktitle = {Proceedings of the 10th International Conference on Software Reuse:
	High Confidence Software Reuse in Large Systems},
  year = {2008},
  pages = {293},
  organization = {Springer-Verlag}
}

@INPROCEEDINGS{Capiluppi07b,
  author = {Capiluppi, A. and Boldyreff, C.},
  title = {{Coupling Patterns in the Effective Reuse of Open Source Software}},
  booktitle = {Proceedings of the First International Workshop on Emerging Trends in FLOSS Research and Development, 2007. FLOSS'07.},
  year = {2007},
  pages = {9--9}
}

@INPROCEEDINGS{Capiluppi07a,
  author = {Capiluppi, A. and Fernandez-Ramil, J.},
  title = {{A Model to Predict Anti-Regressive Effort in Open Source Software}},
  booktitle = {Proceedings of the IEEE International Conference on Software Maintenance, 2007. ICSM
	2007},
  year = {2007},
  pages = {194--203}
}

@INPROCEEDINGS{Capiluppi03b,
  author = {Capiluppi, A. and Lago, P. and Morisio, M.},
  title = {{Evidences in the Evolution of OS Projects Through Changelog Analyses}},
  journal = {Proceedings of the 3rd Workshop on Open Source Software Engineering},
  year = {2003},
  pages = {19--24}
}

@INPROCEEDINGS{Capiluppi03a,
  author = {Capiluppi, A. and Lago, P. and Morisio, M. and e Informatica, D.A.},
  title = {{Characteristics of Open Source Projects}},
  booktitle = {Proceedings of the 7th European Conference on Software Maintenance and Reengineering (CSMR 2003)},
  year = {2003},
  pages = {317--327},
  bdsk-file-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAiQAAAAAAiQAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMb/ydVIKwAAAA+a5h9DYXBpbHVwcGkgLSBDaGFyYWN0ZXIjRjlCMTUucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD5sVxJv74gAAAAAAAAAAAAIABQAACSAAAAAAAAAAAAAAAAAAAAAJRXZvbHV0aW9uAAAQAAgAAMb/LyUAAAARAAgAAMSbb0IAAAABABgAD5rmAA+azgAPl9wAD26uAA5LHAAOSKsAAgBmTWFjaW50b3NoIEhEOlVzZXJzOnJ2YXNhOkRvY3VtZW50czpSZXNlYXJjaDpQYXBlciBDb2xsZWN0aW9uOkV2b2x1dGlvbjpDYXBpbHVwcGkgLSBDaGFyYWN0ZXIjRjlCMTUucGRmAA4ATAAlAEMAYQBwAGkAbAB1AHAAcABpACAALQAgAEMAaABhAHIAYQBjAHQAZQByAGkAcwB0AGkAYwAgAG8AZgAgAE8AUwBTAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgBfVXNlcnMvcnZhc2EvRG9jdW1lbnRzL1Jlc2VhcmNoL1BhcGVyIENvbGxlY3Rpb24vRXZvbHV0aW9uL0NhcGlsdXBwaSAtIENoYXJhY3RlcmlzdGljIG9mIE9TUy5wZGYAABMAAS8AABUAAgAM//8AAIAF0hwdHh9YJGNsYXNzZXNaJGNsYXNzbmFtZaMfICFdTlNNdXRhYmxlRGF0YVZOU0RhdGFYTlNPYmplY3RfEFkuLi8uLi9Eb2N1bWVudHMvUmVzZWFyY2gvUGFwZXIgQ29sbGVjdGlvbi9Fdm9sdXRpb24vQ2FwaWx1cHBpIC0gQ2hhcmFjdGVyaXN0aWMgb2YgT1NTLnBkZtIcHSQloiUhXE5TRGljdGlvbmFyeRIAAYagXxAPTlNLZXllZEFyY2hpdmVyAAgAEQAWAB8AKAAyADUAOgA8AEUASwBSAF0AZQBsAG8AcQBzAHYAeAB6AHwAhgCTAJgAoALIAsoCzwLYAuMC5wL1AvwDBQNhA2YDaQN2A3sAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAADjQ==}
}

@INPROCEEDINGS{Capiluppi04c,
  author = {Andrea Capiluppi and Maurizio Morisio and Patricia Lago},
  title = {{Evolution of Understandability in {OSS} Projects}},
  booktitle = {Proceedings 8th European Conference on Software Maintenance and Reengineering
	(CSMR 2004)},
  year = {2004},
  pages = {58--66},
  address = {Los Alamitos CA},
  publisher = {IEEE Computer Society Press},
  keywords = {evolution}
}

@INPROCEEDINGS{Capiluppi04a,
  author = {Capiluppi, A. and Morisio, M. and Ramil, J.F.},
  title = {{The Evolution of Source Folder Structure in Actively Evolved Open
	Source Systems}},
  booktitle = {Proceedings of the 10th International Symposium on Software Metrics,
	Chicago, USA},
  year = {2004},
  pages = {2--13}
}

@INPROCEEDINGS{Capiluppi04b,
  author = {Capiluppi, A. and Morisio, M. and Ramil, J.F.},
  title = {{Structural Evolution of an Open Source System: A Case Study}},
  booktitle = {Proceedings of the 12th IEEE International Workshop on Program Comprehension},
  year = {2004},
  pages = {172-182},
  month = {June},
  bdsk-url-1 = {http://dx.doi.org/10.1109/WPC.2004.1311059},
  doi = {10.1109/WPC.2004.1311059},
  issn = {1092-8138},
  keywords = {public domain software, software engineering, software prototyping,
	tree data structures ARLA system, code structure, folder tree structure,
	open source system, software engineering, software evolution, software
	products, structural evolution}
}

@ARTICLE{Cartwright00a,
  author = {Cartwright, M. and Shepperd, M.},
  title = {{An Empirical Investigation of an Object-Oriented Software System}},
  journal = {IEEE Transactions on Software Engineering},
  year = {2000},
  volume = {26},
  pages = {786--796},
  number = {8}
}

@INPROCEEDINGS{Casazza01a,
  author = {Casazza, G. and Antoniol, G. and Villano, U. and Merlo, E. and Di
	Penta, M.},
  title = {{Identifying Clones in the Linux Kernel}},
  journal = {Proceedings of the 1st IEEE International Workshop on Source Code Analysis and Manipulation, 2001},
  year = {2001},
  pages = {90--97}
}

@ARTICLE{Chapin01a,
  author = {Chapin, N. and Hale, J.E. and Khan, K.M. and Ramil, J.F. and Tan,
	W.G.},
  title = {{Types of Software Evolution and Software Maintenance}},
  journal = {Journal of Software Maintenance and Evolution Research and Practice},
  year = {2001},
  volume = {13},
  pages = {3--30},
  number = {1}
}

@ARTICLE{Chen04a,
  author = {Chen, K. and Schach, S.R. and Yu, L. and Offutt, J. and Heller, G.Z.},
  title = {{Open-Source Change Logs}},
  journal = {Empirical Software Engineering},
  year = {2004},
  volume = {9},
  pages = {197--210},
  number = {3},
  publisher = {Springer}
}

@ARTICLE{Chen06a,
  author = {Chen, TY and Grant, DD and Lau, MF and Ng, SP},
  title = {{BEAT: A Web-Based Boolean Expression Fault-Based Test Case Generation
	Tool}},
  journal = {International Journal of Distance Education Technologies},
  year = {2006},
  volume = {4},
  pages = {44--56},
  number = {2},
  publisher = {IGI Global}
}

@INPROCEEDINGS{Chen03a,
  author = {Chen, TY and Grant, DD and Lau, MF and Ng, SP and Vasa, VR},
  title = {{Beat: Boolean Expression Fault-Based Test Case Generator}},
  booktitle = {International Conference on Information Technology: Research and Education, 2003.
	(ITRE2003)},
  year = {2003},
  pages = {625--629}
}

@ARTICLE{Chidamber98a,
  author = {Chidamber, S.R. and Darcy, D.P. and Kemerer, C.F.},
  title = {{Managerial Use of Metrics for Object-Oriented Software: An Exploratory
	Analysis}},
  journal = {IEEE Transactions on Software Engineering},
  year = {1998},
  volume = {24},
  pages = {629-639},
  number = {8},
  month = {Aug},
  abstract = {With the increasing use of object-oriented methods in new software
	development, there is a growing need to both document and improve
	current practice in object-oriented design and development. In response
	to this need, a number of researchers have developed various metrics
	for object-oriented systems as proposed aids to the management of
	these systems. In this research, an analysis of a set of metrics
	proposed by Chidamber and Kemerer (1994) is performed in order to
	assess their usefulness for practising managers. First, an informal
	introduction to the metrics is provided by way of an extended example
	of their managerial use. Second, exploratory analyses of empirical
	data relating the metrics to productivity, rework effort and design
	effort on three commercial object-oriented systems are provided.
	The empirical results suggest that the metrics provide significant
	explanatory power for variations in these economic variables, over
	and above that provided by traditional measures, such as size in
	lines of code, and after controlling for the effects of individual
	developers},
  bdsk-url-1 = {http://dx.doi.org/10.1109/32.707698},
  doi = {10.1109/32.707698},
  issn = {0098-5589},
  keywords = {object-oriented programming, project management, software development
	management, software metricsCBO, DIT, LCOM, NOC, RFC, SLOC, WMC,
	design effort, economic variables, exploratory analyses, individual
	developer effects, lines of code, managerial use, object-oriented
	design, object-oriented software, productivity, program size, programming,
	project management, rework effort, software metrics}
}

@ARTICLE{Chidamber94a,
  author = {Shyam R. Chidamber and Chris F. Kemerer},
  title = {{A Metrics Suite for Object Oriented Design}},
  journal = {IEEE Transactions on Software Engineering},
  year = {1994},
  volume = {20},
  pages = {476--493},
  number = {6},
  month = {June},
  date-modified = {2008-04-29 10:28:42 +1000},
  keywords = {Metrics, Classic}
}

@ARTICLE{Clauset07a,
  author = {Clauset, A. and Shalizi, C.R. and Newman, MEJ},
  title = {{Power-law Distributions in Empirical Data}},
  journal = {arXiv},
  year = {2007},
  volume = {706}
}

@BOOK{Clayberg06a,
  title = {{Eclipse: Building Commercial-Quality Plug-ins (Eclipse)}},
  publisher = {Addison-Wesley Professional},
  year = {2006},
  author = {Clayberg, E. and Rubel, D.}
}

@INPROCEEDINGS{Clifton00a,
  author = {Clifton, Curtis and Leavens, Gary T. and Chambers, Craig and Millstein,
	Todd},
  title = {{MultiJava: Modular Open Classes and Symmetric Multiple Dispatch
	for Java}},
  booktitle = {Proceedings OOPSLA 2000},
  year = {2000},
  volume = {35},
  series = {ACM SIGPLAN Notices},
  pages = {130--146},
  month = oct,
  keywords = {olit mixins type oopsla00},
  location = {Privat},
  url = {http://citeseer.nj.nec.com/clifton00multijava.html}
}

@MISC{Cockburn06a,
  author = {Alistair Cockburn},
  title = {{Dos equis Driven Design}},
  year = {2006},
  note = {Retrieved August 25th 2006 \url{alistair.cockburn.us/index.php/Dos_equis_driven_design}},
  bdsk-url-1 = {http://alistair.cockburn.us/index.php/Dos_equis_driven_design},
  keywords = {testing examples},
  url = {http://alistair.cockburn.us/index.php/Dos_equis_driven_design}
}

@BOOK{Cockburn05a,
  title = {{Crystal Clear: A Human-Powered Software Development Methodology for
	Small Teams}},
  publisher = {Addison Wesley},
  year = {2005},
  author = {Cockburn, A.}
}


@BOOK{Cockburn03a,
  title = {{Writing Effective Use Cases}},
  publisher = {Addison Wesley},
  year = {2003},
  author = {Alistair Cockburn},
  isbn = {0201702258},
  keywords = {scglib book}
}

@BOOK{Cockburn02a,
  title = {{Agile Software Development}},
  publisher = {Addison Wesley},
  year = {2002},
  author = {Alistair Cockburn},
  isbn = {0201699699},
  keywords = {scglib agile}
}

@INPROCEEDINGS{Cockburn99a,
  author = {Alistair Cockburn},
  title = {{Characterizing People as Non-Linear, First-Order Components in Software
	Development}},
  booktitle = {Proceedings of the 4th International Multi-Conference on Systemics, Cybernetics, and
	Informatics},
  year = {1999},
  address = {Orlando, FL}
}

@ARTICLE{Coleman95a,
  author = {Coleman, D. and Lowther, B. and Oman, P.},
  title = {{The Application of Software Maintainability Models in Industrial
	Software Systems}},
  journal = {The Journal of Systems and Software},
  year = {1995},
  volume = {29},
  pages = {3--16},
  number = {1},
  publisher = {Elsevier}
}

@MISC{SVN09a,
  author = {CollabNet},
  title = {{Subversion Project}},
  howpublished = {\url{http://subversion.tigris.org/}},
  year = {2009},
  bdsk-url-1 = {http://subversion.tigris.org/},
  keywords = {svn},
  url = {http://subversion.tigris.org/}
}

@ARTICLE{Concas07a,
  author = {Concas, Giulio and Marchesi, Michele and Pinna, Sandro and Serra,
	Nicola},
  title = {{Power-Laws in a Large Object-Oriented Software System}},
  journal = {IEEE Transactions on Software Engineering},
  year = {2007},
  pages = {687--708},
  publisher = {IEEE Computer Society}
}

@ARTICLE{Concas06a,
  author = {Concas, G. and Marchesi, M. and Pinna, S. and Serra, N.},
  title = {{On the Suitability of Yule Process to Stochastically Model Some
	Properties of Object-Oriented Systems}},
  journal = {Physica A: Statistical Mechanics and its Applications},
  year = {2006},
  volume = {370},
  pages = {817--831},
  number = {2},
  publisher = {Elsevier}
}

@BOOK{Constantine01a,
  title = {{The Peopleware Papers}},
  publisher = {Prentice Hall PTR},
  year = {2001},
  author = {Constantine, L.L.}
}

@CONFERENCE{Couch71a,
  author = {Couch, RF},
  title = {{Evolution of a Toll MIS at Bell Canada}},
  booktitle = {Management Information Systems: Selected Papers from MIS Copenhagen
	1970},
  year = {1971},
  pages = {163--188}
}

@INCOLLECTION{Cox66a,
  author = {D.R. Cox and P.A.W. Lewis},
  title = {The Statistical Analysis of Series of Events},
  booktitle = {Monographs on Applied Probability and Statistics},
  publisher = {Chapman and Hall},
  year = {1966}
}

@INPROCEEDINGS{DAmbros07a,
  author = {Marco D'Ambros and Michele Lanza},
  title = {{BugCrawler: Visualizing Evolving Software Systems}},
  booktitle = {Proceedings of the 11th IEEE European Conference on Software
	Maintenance and Reengineering (CSMR 2007)},
  year = {2007},
  date-modified = {2008-05-26 12:52:39 +1000},
  mon = {#mar#}
}

@BOOK{Dalgaard08a,
  title = {{Introductory statistics with R}},
  publisher = {Springer Verlag},
  year = {2008},
  author = {Dalgaard, P.}
}

@ARTICLE{Davis88a,
  author = {John S. Davis and Richard J. LeBlanc},
  title = {{A Study of Applicability of Complexity Measures}},
  journal = {IEEE Transactions on Software Engineering},
  year = {1988},
  volume = {14},
  pages = {1366--1372},
  number = {9},
  month = {September},
  abstract = {A study of predictive value of a variety of syntax-based program complexity
	measures is described. Experimentation with variants of new chunk-oriented
	measured showed that one should judiciosly select measurable software
	attributes as proper indicators of what one wishes to predict, rather
	than hoping for a single, all pirpose complexity measure. This study
	has shown that it is possible for particular complexity measures
	or other factos to serve as good predictors of some properties of
	program but not for others. For example, a good predictor of construction
	time will not necessarily correlate well with the number of error
	occurences. Halstead's effort measure (E) was found to be a better
	predictor than the other two nonchunk measures we evaluated: McCabe's
	V(G) and lines of code, but at least one chunk measure predicted
	better than E in every case.},
  date-modified = {2008-04-29 10:27:03 +1000},
  keywords = {Complexity, software science}
}

@BOOK{Dawkins05a,
  title = {{The View From Mount Improbable}},
  publisher = {Penguin Hardcover},
  year = {2005},
  author = {Dawkins, Richard}
}

@BOOK{Dawkins97a,
  title = {{Climbing Mount Improbable}},
  publisher = {WW Norton and Company},
  year = {1997},
  author = {Dawkins, Richard}
}

@ARTICLE{Demartino06a,
  author = {De Martino, B. and Kumaran, D. and Seymour, B. and Dolan, R.J.},
  title = {{Frames, Biases, and Rational Decision-Making in the Human Brain}},
  journal = {Science},
  year = {2006},
  volume = {313},
  pages = {684--687},
  number = {5787},
  abstract = {Human choices are remarkably susceptible to the manner in which options
	are presented. This so-called framing effect represents a striking
	violation of standard economic accounts of human rationality, although
	its underlying neurobiology is not understood. We found that the
	framing effect was specifically associated with amygdala activity,
	suggesting a key role for an emotional system in mediating decision
	biases. Moreover, across individuals, orbital and medial prefrontal
	cortex activity predicted a reduced susceptibility to the framing
	effect. This finding highlights the importance of incorporating emotional
	processes within models of human choice and suggests how the brain
	may modulate the effect of these biasing influences to approximate
	rationality.},
  publisher = {American Association for the Advancement of Science}
}

@ARTICLE{Deligiannis03a,
  author = {Deligiannis, I. and Shepperd, M. and Roumeliotis, M. and Stamelos,
	I.},
  title = {{An Empirical Investigation of an Object-Oriented Design Heuristic
	for Maintainability}},
  journal = {The Journal of Systems and Software},
  year = {2003},
  volume = {65},
  pages = {127--139},
  number = {2},
  publisher = {Elsevier}
}

@BOOK{Demarco82a,
  title = {{Controlling Software Projects: Management, Measurement and Estimation}},
  publisher = {Yourdon Press New York},
  year = {1982},
  author = {Tom DeMarco}
}

@ARTICLE{Demeyer99a,
  author = {Demeyer, S. and Ducasse, S.},
  title = {{Metrics, Do They Really Help}},
  journal = {Proceedings of LMO’99 (Languages et Mod{\`e}les {\`a} Objets},
  year = {1999},
  pages = {69--82}
}

@INPROCEEDINGS{Demeyer99c,
  author = {Serge Demeyer and St\'ephane Ducasse and Michele Lanza},
  title = {{A Hybrid Reverse Engineering Platform Combining Metrics and Program
	Visualization}},
  booktitle = {Proceedings of 6th Working Conference on Reverse Engineering (WCRE
	'99)},
  year = {1999},
  editor = {Francoise Balmas and Mike Blaha and Spencer Rugaber},
  month = oct,
  publisher = {IEEE Computer Society},
  abstract = {Surprising as it may seem, many of the early adopters of the object-oriented
	paradigm already face a number of problems typically encountered
	in large-scale legacy systems. Consequently, reverse engineering
	techniques are relevant in an object-oriented context as well. This
	paper investigates a hybrid approach, combining the immediate appeal
	of visualisations with the scalability of metrics. We validate such
	a hybrid approach by showing how CodeCrawler ---the experimental
	platform we built--- allowed us to understand the program structure
	of, and identify potential design anomalies in a public domain software
	system.},
  annote = {internationalconference},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Deme99cCodeCrawler.pdf},
  bdsk-url-2 = {http://dx.doi.org/10.1109/WCRE.1999.806958},
  doi = {10.1109/WCRE.1999.806958},
  keywords = {olit famoos-papref scg-pub snf99 jb99 oorp stefPub moose-pub},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Deme99cCodeCrawler.pdf}
}

@ARTICLE{Demeyer04a,
  author = {Demeyer, S. and Ducasse, S. and Mens, K. and Trifu, A. and Vasa,
	R. and Van Rysselberghe, F.},
  title = {{Object-Oriented Reengineering}},
  journal = {Lecture Notes in Computer Science},
  year = {2004},
  volume = {3013},
  pages = {72--85},
  publisher = {Springer}
}

@INPROCEEDINGS{Demeyer04b,
  author = {Serge Demeyer and St\'ephane Ducasse and Kim Mens and Adrian Trifu
	and Rajesh Vasa and Filip {Van Rysselberghe}},
  title = {Workshop on Object-Oriented Reengineering},
  booktitle = {Workshop Reader of Object-Oriented Technology (ECOOP'03)},
  year = {2004},
  volume = {LNCS 3013},
  series = {Lecture Notes in Computer Science},
  publisher = {Springer-Verlag},
  note = {[SCI impact factor 0.402, ranked 62 / 71]},
  conference = {ECOOP 2003},
  conferenceurl = {http://www.ecoop.tu-darmstadt.de/},
  workshop = {4th International Workshop on OO Reengineering},
  workshopurl = {http://www.lore.ua.ac.be/Events/WOOR03}
}

@BOOK{Demeyer08a,
  title = {{Object-Oriented Reengineering Patterns}},
  publisher = {Square Bracket Associates},
  year = {2008},
  author = {Serge Demeyer and St{\'e}phane Ducasse and Oscar Nierstrasz},
  abstract = {The rapid growth of object-oriented development over the past twenty
	years has given rise to many object-oriented systems that are large,
	complex and hard to maintain. Object-Oriented Reengineering Patterns
	addresses the problem of understanding and reengineering such object-oriented
	legacy systems. This book collects and distills successful techniques
	in planning a reengineering project, reverse-engineering, problem
	detection, migration strategies and software redesign. The material
	in this book is presented as a set of reengineering patterns ---
	recurring solutions that experts apply while reengineering and maintaining
	object-oriented systems. The principles and techniques described
	in this book have been observed and validated in a number of industrial
	projects, and reflect best practice in object-oriented reengineering.},
  annote = {book},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/OORP},
  isbn = {978-3-9523341-2-6},
  keywords = {olit scg-pub skipdoi stefPub moose-pub},
  url = {http://www.iam.unibe.ch/~scg/OORP}
}

@INPROCEEDINGS{Demeyer00a,
  author = {Serge Demeyer and St\'ephane Ducasse and Oscar Nierstrasz},
  title = {{Finding Refactorings via Change Metrics}},
  booktitle = {Proceedings of the 15th International Conference on Object-Oriented Programming,
	Systems, Languages, and Applications (OOPSLA '00)},
  year = {2000},
  pages = {166-178},
  address = {New York NY},
  publisher = {ACM Press},
  note = {Also appeared in ACM SIGPLAN Notices 35 (10)},
  abstract = {Reverse engineering is the process of uncovering the design and the
	design rationale from a functioning software system. Reverse engineering
	is an integral part of any successful software system, because changing
	requirements lead to implementations that drift from their original
	design. In contrast to traditional reverse engineering techniques
	-which analyse a single snapshot of a system- we focus the reverse
	engineering effort by determining where the implementation has changed.
	Since changes of object-oriented software are often phrased in terms
	of refactorings, we propose a set of heuristics for detecting refactorings
	by applying lightweight, object-oriented metrics to successive versions
	of a software system. We validate our approach with three separate
	case studies of mature object-oriented software systems for which
	multiple versions are available. The case studies suggest that the
	heuristics support the reverse engineering process by focusing attention
	on the relevant parts of a software system.},
  annote = {internationalconference topconference},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Deme00aFindingRefactoring.pdf},
  bdsk-url-2 = {http://dx.doi.org/10.1145/353171.353183},
  doi = {10.1145/353171.353183},
  keywords = {olit scg-pub jb00 snf00 oorp stefPub moose-pub},
  misc = {acceptance rate: 26/142 = 18\%, SCI impact factor 0.190, ranked 66/77},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Deme00aFindingRefactoring.pdf}
}

@BOOK{Dettmer97a,
  title = {{Goldratt's Theory of Constraints: a Systems Approach to Continuous
	Improvement}},
  publisher = {ASQ Press},
  year = {1997},
  author = {Dettmer, H.W.}
}

@CONFERENCE{Dilucca01a,
  author = {Di Lucca, G.A. and Di Penta, M. and Fasolino, A.R. and Granato, P.},
  title = {{Clone Analysis in the Web Era: an Approach to Identify Cloned Web
	Pages}},
  booktitle = {Seventh Workshop on Empirical Studies of Software Maintenance},
  year = {2001},
  pages = {107}
}

@CONFERENCE{DiPenta08a,
  author = {Di Penta, M. and Cerulo, L. and Gueheneuc, Y.G. and Antoniol, G.},
  title = {{An Empirical Study of the Relationships Between Design Pattern Roles
	and Class Change Proneness}},
  booktitle = {IEEE International Conference on Software Maintenance (ICSM
	2008)},
  year = {2008},
  pages = {217--226}
}

@BOOK{Oxford08a,
  title = {{Concise Oxford English Dictionary}},
  publisher = {{Oxford University Press}},
  year = {2008},
  author = {Oxford Dictionaries}
}

@BOOK{Diggle02a,
  title = {{Analysis of Longitudinal Data}},
  publisher = {Oxford University Press},
  year = {2002},
  author = {Diggle, P.J. and Heagerty, P.J. and Liang, K.Y. and Zeger, S.L.}
}

@ARTICLE{Dixon88a,
  author = {Dixon, Philip and Weiner, Jacob and Mitchell-Olds, Thomas and Woodley,
	Robert},
  title = {{Erratum to Bootstraping the Gini Coefficient of Inequality}},
  journal = {Ecology},
  year = {1988},
  volume = {69},
  pages = {1307--1307},
  number = {4},
  month = aug,
  publisher = {Ecological Society of America}
}

@TECHREPORT{Ducasse01c,
  author = {Ducasse, St\'ephane},
  title = {{Reengineering Object-Oriented Applications}},
  institution = {Universit\'e Pierre et Marie Curie (Paris 6)},
  year = {2001},
  month = sep,
  note = {TR University of Berne, Institute of Computer Science and Applied
	Mathematics --- iam-03-008},
  abstract = {Reengineering ob ject-oriented applications is becoming a vital activity
	in today industry where the developer turnover drains the system
	oral memory out of the systems themselves and where applications
	should constantly evolve to meet new requirements. This document
	summarizes the research effort led on reverse engineering and reengineering
	ob ject-oriented legacy systems. It includes (1) the definition of
	a suitable meta-model for reengineering, FAMIX. This meta-model,
	even if flat, supports both reverse engineering and code refac- toring
	analysis, (2) the presentation of a reengineering platform, MOOSE,
	(3) the evalution of software metrics for reengineer, (4) the definition
	of simple visual techniques to support large system understanding
	or finer grain code element, (5) the identification and cure sup-
	port for duplicated code, (6) the use of dynamic information to support
	composable views and collaboration extraction, and (7) the identification
	of reengineer patterns. Keywords. Meta-Modeling, Language Independence,
	Reengineering, Reverse Engineering, Code Duplica- tion, Reengineering
	Patterns, Program Traces, Dynamic Information, Program Visualization,
	Software Metrics, Refactorings, Interexchange Format, CODECRAWLER,
	FAMIX, MOOSE, FAMOOS, Smalltalk, Java, C++.},
  annote = {habilitation},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Duca01cHab.pdf},
  keywords = {scg-pub skipdoi jb-none reengineering snf02 stefPub moose-pub},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Duca01cHab.pdf}
}

@INPROCEEDINGS{Duca04f,
  author = {St\'ephane Ducasse and Tudor G\^irba and Jean-Marie Favre},
  title = {{Modeling Software Evolution by Treating History as a First Class
	Entity}},
  booktitle = {Proceedings of the Workshop on Software Evolution Through Transformation
	(SETra 2004)},
  year = {2004},
  pages = {75--86},
  address = {Amsterdam},
  publisher = {Elsevier},
  abstract = {The histories of software systems hold useful information when reasoning
	about the systems at hand or about general laws of software evolution.
	Yet, the approaches developed so far, do not rely on an explicit
	meta-model and do not facilitate the comparison of different evolutions.
	We argue for the need to define history as a first class entity and
	propose a meta-model centered around the notion of history. We show
	the usefulness of our a meta-model by discussing the different analysis
	it enables.},
  annote = {internationalworkshop},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Duca04fHismo.pdf},
  bdsk-url-2 = {http://dx.doi.org/10.1016/j.entcs.2004.08.035},
  doi = {10.1016/j.entcs.2004.08.035},
  keywords = {scg-pub evolution van stefPub recast05 jointERCIM girba hismo jb05
	moose-pub},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Duca04fHismo.pdf}
}

@INPROCEEDINGS{Ducasse04f,
  author = {St\'ephane Ducasse and Tudor G\^irba and Jean-Marie Favre},
  title = {{Modeling Software Evolution by Treating History as a First Class
	Entity}},
  booktitle = {Proceedings of the Workshop on Software Evolution Through Transformation
	(SETra 2004)},
  year = {2004},
  pages = {75--86},
  address = {Amsterdam},
  publisher = {Elsevier},
  abstract = {The histories of software systems hold useful information when reasoning
	about the systems at hand or about general laws of software evolution.
	Yet, the approaches developed so far, do not rely on an explicit
	meta-model and do not facilitate the comparison of different evolutions.
	We argue for the need to define history as a first class entity and
	propose a meta-model centered around the notion of history. We show
	the usefulness of our a meta-model by discussing the different analysis
	it enables.},
  annote = {internationalworkshop},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Duca04fHismo.pdf},
  bdsk-url-2 = {http://dx.doi.org/10.1016/j.entcs.2004.08.035},
  doi = {10.1016/j.entcs.2004.08.035},
  keywords = {scg-pub evolution van stefPub recast05 jointERCIM girba hismo jb05
	moose-pub},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Duca04fHismo.pdf}
}

@ARTICLE{Ducasse06i,
  author = {St\'ephane Ducasse and Oscar Nierstrasz and Matthias Rieger},
  title = {{On the Effectiveness of Clone Detection by String Matching}},
  journal = {Journal of Software Maintenance and Evolution: Research and Practice
	(JSME)},
  year = {2006},
  volume = {18},
  pages = {37-58},
  number = {1},
  month = jan,
  abstract = { Although duplicated code is known to pose severe problems for software
	maintenance, it is difficult to identify in large systems. Many different
	techniques have been developed to detect software clones, some of
	which are very sophisticated, but are also expensive to implement
	and adapt. Lightweight techniques based on simple string matching
	are easy to implement, but how effective are they? We present a simple
	stringbased approach which we have successfully applied to a number
	of different languages such COBOL, {Java}, C++, Pascal, Python, Smalltalk,
	C and PDP-11 assembler. In each case the maximum time to adapt the
	approach to a new language was less than 45 minutes. In this article
	we investigate a number of simple variants of string-based clone
	detection that abstract away from common editing operations, and
	assess the quality of clone detection for very different case studies.
	Our results confirm that this inexpensive clone detection technique
	generally achieves high recall and acceptable precision. Over-zealous
	normalization of the code before comparison, however, can result
	in unacceptable numbers of false positives. },
  annote = {internationaljournal},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Duca06iDuplocJSMEPaper.pdf},
  bdsk-url-2 = {http://dx.doi.org/10.1002/smr.317},
  cvs = {DuplocJournalPaper},
  doi = {10.1002/smr.317},
  keywords = {scg-pub recast06 jb06 stefPub duploc},
  misc = {SCI impact factor 0.457 (2005)},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Duca06iDuplocJSMEPaper.pdf}
}

@MISC{Eclipse09a,
  author = {EclipseFoundation},
  title = {{Eclipse IDE}},
  howpublished = {\url{http://www.eclipse.org/}},
  year = {2009}
}

@ARTICLE{Elemam01a,
  author = {El Emam, K. and Benlarbi, S. and Goel, N. and Rai, S.N.},
  title = {{The Confounding Effect of Class Size on the Validity of Object-Oriented
	Metrics}},
  journal = {IEEE Transactions on Software Engineering},
  year = {2001},
  volume = {27},
  pages = {630--650},
  number = {7},
  publisher = {IEEE}
}

@ARTICLE{Elemam01b,
  author = {El Emam, K. and Melo, W. and Machado, J.C.},
  title = {{The Prediction of Faulty Classes Using Object-Oriented Design Metrics}},
  journal = {The Journal of Systems and Software},
  year = {2001},
  volume = {56},
  pages = {63--75},
  number = {1},
  publisher = {Elsevier}
}

@book{Stallman94a,
  title={{GNU Make: A program for Directing Recompilation}},
  author={Richard Stallman},
  year={1994},
  publisher={Free Software Foundation}
}

@ARTICLE{Ericcson80a,
  author = {Ericcson, K. A. and Chase, W. G. and Faloon, S.},
  title = {{Acquisition of a Memory Skill}},
  journal = {Science},
  year = {1980},
  volume = {208},
  pages = {1181--1182},
  number = {4448},
  month = jun
}

@ARTICLE{Farmer09a,
  author = {Farmer, JD and Foley, D.},
  title = {{The Economy Needs Agent-Based Modelling}},
  journal = {Nature},
  year = {2009},
  volume = {460},
  pages = {685},
  number = {7256}
}

@BOOK{Fenton96a,
  title = {{Software Metrics: A Rigorous and Practical Approach}},
  publisher = {International Thomson Computer Press},
  year = {1996},
  author = {Norman Fenton and Shari Lawrence Pfleeger},
  address = {London, UK},
  edition = {Second},
  isbn = {0534956009},
  keywords = {metrics oorp scglib}
}

@ARTICLE{Fenton99a,
  author = {Norman E. Fenton and Martin Neil},
  title = {{A Critique of Software Defect Prediction Models}},
  journal = {IEEE Transactions on Software Engineering},
  year = {1999},
  volume = {25},
  pages = {675-689},
  number = {5},
  address = {Los Alamitos, CA, USA},
  bdsk-url-1 = {http://dx.doi.org/10.1109/32.815326},
  doi = {10.1109/32.815326},
  issn = {0098-5589},
  publisher = {IEEE Computer Society}
}

@ARTICLE{Fernandez08a,
  author = {Fernandez-Ramil, J. and Lozano, A. and Wermelinger, M. and Capiluppi,
	A.},
  title = {{Empirical Studies of Open Source Evolution}},
  journal = {Software Evolution},
  year = {2008},
  pages = {263--288},
  publisher = {Springer}
}

@ARTICLE{Fischer05a,
  author = {Fischer, M. and Oberleitner, J. and Ratzinger, J. and Gall, H.},
  title = {{Mining Evolution Data of a Product Family}},
  journal = {ACM SIGSOFT Software Engineering Notes},
  year = {2005},
  volume = {30},
  pages = {1--5},
  number = {4},
  publisher = {ACM Press New York, NY, USA}
}

@MISC{Flanagan08a,
  author = {Flanagan, MT},
  title = {{Michael Thomas Flanagan's Java Scientific Library}},
  howpublished = {\url{http://www.ee.ucl.ac.uk/mflanaga/java}},
  year = {2008},
  bdsk-url-1 = {http://www.ee.ucl.ac.uk/mflanaga/java},
  date-modified = {2009-11-11 15:18:14 +1100},
  read = {Yes},
  url = {http://www.ee.ucl.ac.uk/mflanaga/java}
}

@BOOK{Fowler99a,
  title = {{Refactoring: Improving the Design of Existing Code}},
  publisher = {Addison Wesley},
  year = {1999},
  author = {Martin Fowler and Kent Beck and John Brant and William Opdyke and
	Don Roberts},
  keywords = {olit patterns famoos refactoring oorp scglib}
}

@ARTICLE{Fry76a,
  author = {James P. Fry and Edgar H. Sibley},
  title = {{Evolution of Data-Base Management Systems}},
  journal = {ACM Computer Survey},
  year = {1976},
  volume = {8},
  pages = {7--42},
  number = {1},
  address = {New York, NY, USA},
  bdsk-url-1 = {http://doi.acm.org/10.1145/356662.356664},
  doi = {http://doi.acm.org/10.1145/356662.356664},
  issn = {0360-0300},
  publisher = {ACM}
}

@ARTICLE{Fuggetta03a,
  author = {Fuggetta, A.},
  title = {{Open Source Software----An Evaluation}},
  journal = {The Journal of Systems and Software},
  year = {2003},
  volume = {66},
  pages = {77--90},
  number = {1},
  publisher = {Elsevier}
}

@BOOK{Futuyma98a,
  title = {{Evolutionary Biology}},
  publisher = {Sunderland, Mass.: Sinauer},
  year = {1998},
  author = {Futuyma, D.J.}
}

@PHDTHESIS{Girba05d,
  author = {Tudor G\^irba},
  title = {{Modeling History to Understand Software Evolution}},
  school = {University of Berne},
  year = {2005},
  address = {Berne},
  month = nov,
  abstract = {Over the past three decades, more and more research has been spent
	on understanding software evolution. The development and spread of
	versioning systems made valuable data available for study. Indeed,
	versioning systems provide rich information for analyzing software
	evolution, but it is exactly the richness of the information that
	raises the problem. The more versions we consider, the more data
	we have at hand. The more data we have at hand, the more techniques
	we need to employ to analyze it. The more techniques we need, the
	more generic the infrastructure should be. The approaches developed
	so far rely on ad-hoc models, or on too specific meta-models, and
	thus, it is difficult to reuse or compare their results. We argue
	for the need of an explicit and generic meta-model for allowing the
	expression and combination of software evolution analyses. We review
	the state-of-the-art in software evolution analysis and we conclude
	that: \emph{To provide a generic meta-model for expressing software
	evolution analyses, we need to recognize the evolution as an explicit
	phenomenon and model it as a first class entity.} Our solution is
	to encapsulate the evolution in the explicit notion of history as
	a sequence of versions, and to build a meta-model around these notions:
	Hismo. To show the usefulness of our meta-model we exercise its dif
	ferent characteristics by building several reverse engineering applications.
	This dissertation of fers a meta-model for software evolution analysis
	yet, the concepts of history and version do not necessarily depend
	on software. We show how the concept of history can be generalized
	and how we can obtain our meta-model by transformations applied on
	structural meta-models. As a consequence, our approach of modeling
	evolution is not restricted to software analysis, but can be applied
	to other fields as well.},
  annote = {phdthesis},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/PhD/girba-phd.pdf},
  cvs = {TGirbaPhD},
  keywords = {scg-pub skipdoi scg-phd evolution girba jb06 recast06 moose-pub van
	meta-modeling visualization metrics hismo},
  pages = {164},
  url = {http://www.iam.unibe.ch/~scg/Archive/PhD/girba-phd.pdf}
}

@ARTICLE{Girba06a,
  author = {Tudor G\^irba and St\'ephane Ducasse},
  title = {{Modeling History to Analyze Software Evolution}},
  journal = {Journal of Software Maintenance: Research and Practice (JSME)},
  year = {2006},
  volume = {18},
  pages = {207-236},
  abstract = {The histories of software systems hold useful information when reasoning
	about the systems at hand or when reasoning about general laws of
	software evolution. Over the past 30 years more and more research
	has been spent on understanding software evolution. However, the
	approaches developed so far do not rely on an explicit meta-model,
	and thus, they make it difficult to reuse or compare their results.
	We argue that there is a need for an explicit meta-model for software
	evolution analysis. We present a survey of the evolution analyses
	and deduce a set of requirements that an evolution meta-model should
	have. We define, Hismo, a meta-model in which history is modeled
	as an explicit entity. Hismo adds a time layer on top of structural
	information, and provides a common infrastructure for expressing
	and combining evolution analyses and structural analyses. We validate
	the usefulness of our a meta-model by presenting how different analyses
	are expressed on it.},
  annote = {internationaljournal},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Girb06aHismo.pdf},
  keywords = {hasler07 scg-pub skipdoi recast06 jb06 stefPub moose-pub van girba
	snf-actsc norex06 meta-modeling hismo evolution},
  misc = {SCI impact factor 0.457 (2005)},
  publisher = {John Wiley and Sons, Ltd.},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Girb06aHismo.pdf}
}

@article{Fluri07a,
  title={{Change Distilling: Tree Differencing for Fine-Grained Source Code Change Extraction}},
  author={Fluri, B. and Wursch, M. and Pinzger, M. and Gall, HC},
  journal={IEEE Transactions on Software Engineering},
  volume={33},
  number={11},
  pages={725--743},
  year={2007}
}

@article{Purushothaman05a,
  title={{Toward Understanding the Rhetoric of Small Source Code Changes}},
  author={Purushothaman, R. and Perry, DE},
  journal={IEEE Transactions on Software Engineering},
  volume={31},
  number={6},
  pages={511--526},
  year={2005}
}


@INPROCEEDINGS{Girba07a,
  author = {Tudor G\^irba and St\'ephane Ducasse and Adrian Kuhn and Radu Marinescu
	and Daniel Ra\c{t}iu},
  title = {{Using Concept Analysis to Detect Co-Change Patterns}},
  booktitle = {Proceedings of International Workshop on Principles of Software Evolution
	(IWPSE 2007)},
  year = {2007},
  pages = {83--89},
  abstract = {Software systems need to change over time to cope with new requirements,
	and due to design decisions, the changes happen to crosscut the system's
	structure. Understanding how changes appear in the system can reveal
	hidden dependencies between different entities of the system. We
	propose the usage of concept analysis to identify groups of entities
	that change in the same way and in the same time. We apply our approach
	at different levels of abstraction (i.e., method, class, package)
	and we detect fine grained changes (i.e., statements were added in
	a class, but no method was added there). Concept analysis is a technique
	that identifies entities that have the same properties, but it requires
	manual inspection due to the large number of candidates it detects.
	We propose a heuristic that dramatically eliminate the false positives.
	We apply our approach on two case studies and we show how we can
	identify hidden dependencies and detect bad smells.},
  annote = {internationalworkshop},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Girb07aCoChangePatterns.pdf},
  keywords = {scg-pub evolution fca girba jb08 moose-pub norex07 stefPub},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Girb07aCoChangePatterns.pdf}
}

@INPROCEEDINGS{Girba04b,
  author = {Tudor G\^irba and St\'ephane Ducasse and Michele Lanza},
  title = {{Yesterday's Weather: Guiding Early Reverse Engineering Efforts
	by Summarizing the Evolution of Changes}},
  booktitle = {Proceedings of 20th IEEE International Conference on Software Maintenance
	(ICSM'04)},
  year = {2004},
  pages = {40--49},
  address = {Los Alamitos CA},
  month = sep,
  publisher = {IEEE Computer Society},
  abstract = {Knowing where to start reverse engineering a large software system,
	when no information other than the system`s source code itself is
	available, is a daunting task. Having the history of the code (i.e.,
	the versions) could be of help if this would not imply analyzing
	a huge amount of data. In this paper we present an approach for identifying
	candidate classes for reverse engineering and reengineering efforts.
	Our solution is based on summarizing the changes in the evolution
	of object-oriented software systems by defining history measurements.
	Our approach, named Yesterday`s Weather, is an analysis based on
	the retrospective empirical observation that classes which changed
	the most in the recent past also suffer important changes in the
	near future. We apply this approach on two case studies and show
	how we can obtain an overview of the evolution of a system and pinpoint
	its classes that might change in the next versions.},
  annote = {internationalconference},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Girb04bYesterdayWeather.pdf},
  bdsk-url-2 = {http://dx.doi.org/10.1109/ICSM.2004.1357788},
  doi = {10.1109/ICSM.2004.1357788},
  keywords = {scg-pub evolution metrics hismo stefPub van moose-pub girba recast05
	jb05},
  location = {Illinois, USA},
  misc = {acceptance rate: 38/122 = 31\%},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Girb04bYesterdayWeather.pdf}
}

@INPROCEEDINGS{Girba04d,
  author = {Tudor G\^irba and St\'ephane Ducasse and Radu Marinescu and Daniel
	Ra\c{t}iu},
  title = {{Identifying Entities That Change Together}},
  booktitle = {Proceedings of the Ninth IEEE Workshop on Empirical Studies of Software Maintenance},
  year = {2004},
  abstract = {Software system need to change over time to cope with the new requirements.
	Furthermore, due to design decisions, the new requirements happen
	to crosscut the system's structure. Understanding how changes appear
	in the system can reveal hidden dependencies between different parts
	of the system. We propose to group entities that change together
	according to a logical expression that specifies the change condition.
	Furthermore, we can group entities at different levels of abstraction
	(i.e., method, class, package). Our approach is based on an explicit
	history meta model that centers around the notion of history and
	which enables the definition of historical measurements which summarize
	the changes. We apply our approach on two large case studies and
	show how we can identify groups of related entities and detect bad
	smells.},
  annote = {internationalworkshop},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Girb04dEntitiesChangeTogether.pdf},
  keywords = {scg-pub skipdoi evolution van stefPub recast05 girba jb05 moose-pub},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Girb04dEntitiesChangeTogether.pdf}
}

@INPROCEEDINGS{Girb05b,
  author = {Tudor G\^irba and Jean-Marie Favre and St\'ephane Ducasse},
  title = {{Using Meta-Model Transformation to Model Software Evolution}},
  year = {2004},
  note = {Proceedings of the 2nd International Workshop on Meta-Models and Schemas for Reverse
	Engineering (ATEM 2004)},
  abstract = {Understanding how software systems evolve is useful from different
	perspectives: reverse engineering, empirical studies etc.. For an
	effective understanding we need an explicit meta-model. We introduce
	Hismo, a meta-model which is centered around the notion of history
	and we show how we can obtain it from a snapshot meta-model. Based
	on our experience in developing the Hismo reverse engineering system,
	we show how we can transform a snapshot meta-model in a history metamodel.},
  annote = {internationalworkshop},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Girb05bMetaModelTransATEM2004.pdf},
  keywords = {scg-pub skipdoi evolution hismo van moose-pub recast05 jointERCIM
	girba stefPub jb05},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Girb05bMetaModelTransATEM2004.pdf}
}

@MISC{Girba05b,
  author = {Tudor G\^irba and Jean-Marie Favre and St\'ephane Ducasse},
  title = {{Using Meta-Model Transformation to Model Software Evolution}},
  year = {2004},
  note = {2nd International Workshop on Meta-Models and Schemas for Reverse
	Engineering (ATEM 2004)},
  abstract = {Understanding how software systems evolve is useful from different
	perspectives: reverse engineering, empirical studies etc.. For an
	effective understanding we need an explicit meta-model. We introduce
	Hismo, a meta-model which is centered around the notion of history
	and we show how we can obtain it from a snapshot meta-model. Based
	on our experience in developing the Hismo reverse engineering system,
	we show how we can transform a snapshot meta-model in a history metamodel.},
  annote = {internationalworkshop},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Girb05bMetaModelTransATEM2004.pdf},
  keywords = {scg-pub skipdoi evolution hismo van moose-pub recast05 jointERCIM
	girba stefPub jb05},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Girb05bMetaModelTransATEM2004.pdf}
}

@INPROCEEDINGS{Girba05c,
  author = {Tudor G\^irba and Adrian Kuhn and Mauricio Seeberger and St\'ephane
	Ducasse},
  title = {{How Developers Drive Software Evolution}},
  booktitle = {Proceedings of the International Workshop on Principles of Software Evolution
	(IWPSE 2005)},
  year = {2005},
  pages = {113--122},
  publisher = {IEEE Computer Society Press},
  abstract = {As systems evolve their structure change in ways not expected upfront.
	As time goes by, the knowledge of the developers becomes more and
	more critical for the process of understanding the system. That is,
	when we want to understand a certain issue of the system we ask the
	knowledgeable developers. Yet, in large systems, not every developer
	is knowledgeable in all the details of the system. Thus, we would
	want to know which developer is knowledgeable in the issue at hand.
	In this paper we make use of the mapping between the changes and
	the author identifiers (e.g., user names) provided by versioning
	repositories. We first define a measurement for the notion of code
	ownership. We use this measurement to define the Ownership Map visualization
	to understand when and how different developers interacted in which
	way and in which part of the system. We report the results we obtained
	on several large systems.},
  annote = {internationalworkshop},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Girb05cOwnershipMap.pdf},
  bdsk-url-2 = {http://dx.doi.org/10.1109/IWPSE.2005.21},
  cvs = {ChroniaIWPSE2005},
  doi = {10.1109/IWPSE.2005.21},
  keywords = {scg-pub evolution visualization stefPub girba recast06 jb06 moose-pub
	chronia},
  location = {Lisbon, Portugal},
  misc = {acceptance rate: 13/54 = 24\%},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Girb05cOwnershipMap.pdf}
}

@MISC{Girba04a,
  author = {Tudor G\^irba and Michele Lanza},
  title = {{Visualizing and Characterizing the Evolution of Class Hierarchies}},
  year = {2004},
  abstract = {Analyzing historical information can show how a software system evolved
	into its current state, but it can also show which parts of the system
	are more evolution prone. Yet, historical analysis implies processing
	a vast amount of information which makes the interpretation difficult.
	To address this issue, we introduce the notion of history of source
	code artifacts as a first class entity and define measurements which
	summarize the evolution of such entities. We then use these measurements
	to define polymetric views for visualizing the effect of time on
	class hierarchies. We show the application of our approach on one
	large open source case study and reveal how we can classify the class
	hierarchies based on their history.},
  annote = {internationalworkshop},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Girb04aHierarchiesEvolution.pdf},
  booktitle = {WOOR 2004 (5th ECOOP Workshop on Object-Oriented Reengineering)},
  keywords = {scg-pub skipdoi evolution visualization van hismo girba recast04 jb04
	moose-pub},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Girb04aHierarchiesEvolution.pdf}
}

@INPROCEEDINGS{Girba05a,
  author = {Tudor G\^irba and Michele Lanza and St\'ephane Ducasse},
  title = {{Characterizing the Evolution of Class Hierarchies}},
  booktitle = {Proceedings of the 9th European Conference on Software Maintenance and
	Reengineering (CSMR'05)},
  year = {2005},
  pages = {2--11},
  address = {Los Alamitos CA},
  publisher = {IEEE Computer Society},
  abstract = {Analyzing historical information can show how a software system evolved
	into its current state, which parts of the system are stable and
	which have changed more. However, historical analysis implies processing
	a vast amount of information making the interpretation of the results
	difficult. To address this issue, we introduce the notion of the
	history of source code artifacts as a first class entity and define
	measurements which summarize the evolution of such entities. We use
	these measurements to define rules by which to detect different characteristics
	of the evolution of class hierarchies. Furthermore, we discuss the
	results we obtained by visualizing them using a polymetric view.
	We apply our approach on two large open source case studies and classify
	their class hierarchies based on their history.},
  annote = {internationalconference},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Girb05aHierarchiesEvolution.pdf},
  bdsk-url-2 = {http://dx.doi.org/10.1109/CSMR.2005.15},
  doi = {10.1109/CSMR.2005.15},
  keywords = {scg-pub evolution visualization van recast05 girba stefPub jb05 moose-pub},
  misc = {acceptance rate: 33/81 = 41 \%},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Girb05aHierarchiesEvolution.pdf}
}

@INPROCEEDINGS{Girba08a,
  author = {Tudor G\^irba and Michele Lanza and Radu Marinescu},
  title = {{Pragmatic Software Quality Detection}},
  booktitle = {Proceedings of the International Conference on Software Engineering (ICSE
	2008)},
  year = {2008},
  pages = {xxx--xxx},
  note = {Tutorial. To appear},
  abstract = {Quality control is paramount in every engineering discipline. Software
	engineering, however, is not considered a classical engineering activity
	for several reasons, such as intrinsic complexity and lack of rigor.
	In general, if a software system is delivering the expected functionality,
	only in few cases people see the need to analyze the internals. In
	this tutorial we offer a pragmatic approach to analyzing the quality
	of software systems. On the one hand, we offer the theoretical background
	to detect quality problems by using and combining metrics, by analyzing
	the past through evolution analysis, and by providing visual evidence
	of the state of affairs in the system. On the other hand, as analyzing
	real systems requires adequate tool support, we offer an overview
	of the problems that occur in using such tools and provide a hands-on
	session with state-of-the-art tools used on a real case study.},
  annote = {tutorial},
  keywords = {scg-misc scg-sub girba tutorial moose-pub}
}

@INPROCEEDINGS{Gall97a,
  author = {Harald Gall and Mehdi Jazayeri and Ren{\'e} Kl{\"o}sch and Georg
	Trausmuth},
  title = {{Software Evolution Observations Based on Product Release History}},
  booktitle = {Proceedings of the International Conference on Software Maintenance (ICSM'97)},
  year = {1997},
  pages = {160--166},
  address = {Los Alamitos CA},
  publisher = {IEEE Computer Society Press},
  bdsk-url-1 = {http://www.infosys.tuwien.ac.at/Cafe/doc/icsm97.pdf},
  bdsk-url-2 = {http://dx.doi.org/10.1109/ICSM.1997.624242},
  doi = {10.1109/ICSM.1997.624242},
  keywords = {oorp evolution},
  url = {http://www.infosys.tuwien.ac.at/Cafe/doc/icsm97.pdf}
}

@INPROCEEDINGS{Gall03a,
  author = {Harald Gall and Mehdi Jazayeri and Jacek Krajewski},
  title = {{CVS} Release History Data for Detecting Logical Couplings},
  booktitle = {Proceedings of the International Workshop on Principles of Software Evolution (IWPSE
	2003)},
  year = {2003},
  pages = {13-23},
  address = {Los Alamitos CA},
  publisher = {IEEE Computer Society Press},
  keywords = {oorp evolution clustering}
}

@BOOK{Gamma95a,
  title = {{Design Patterns}},
  publisher = {Addison-Wesley},
  year = {1995},
  author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides,
	John},
  bdsk-url-1 = {http://hillside.net/patterns/DPBook/DPBook.html},
  issn_isbn = {ISBN 0-201-63361-2},
  keywords = {scgbib scglib oose pattern olit gof},
  location = {Privat},
  url = {http://hillside.net/patterns/DPBook/DPBook.html}
}

@INPROCEEDINGS{Gamma93b,
  author = {Erich Gamma and Richard Helm and John Vlissides and Ralph E. Johnson},
  title = {{Design Patterns: Abstraction and Reuse of Object-Oriented Design}},
  booktitle = {Proceedings ECOOP '93},
  year = {1993},
  editor = {Oscar Nierstrasz},
  volume = {707},
  series = {LNCS},
  pages = {406-431},
  address = {Kaiserslautern, Germany},
  month = jul,
  publisher = {Springer-Verlag},
  abstract = {We propose design patterns as a new mechanism for expressing object-oriented
	design experience. Design patterns identify, name, and abstract common
	themes in object-oriented design. They capture the intent behind
	a design by identifying objects, their collaborations, and the distribution
	of responsibilities. Design patterns play many roles in the object-oriented
	development process: they provide a common vocabulary for design,
	they reduce system complexity by naming and defining abstractions,
	they constitute a base of experience for building reusable software,
	and they act as building blocks from which more complex designs can
	be built. Design patterns can be considered reusable micro-architectures
	that contribute to an overall system architecture. We describe how
	to express and organize design patterns and introduce a catalog of
	design patterns. We also describe our experience in applying design
	patterns to the design of object-oriented systems.},
  bdsk-url-1 = {ftp://st.cs.uiuc.edu/pub/papers/patterns/ecoop93-patterns.ps},
  keywords = {olit-oose ecoop93proc design-patterns},
  url = {ftp://st.cs.uiuc.edu/pub/papers/patterns/ecoop93-patterns.ps}
}

@BOOK{Gardner02a,
  title = {{XSLT and XPath: A guide to XML Transformations}},
  publisher = {Prentice Hall},
  year = {2002},
  author = {Gardner, J.R. and Rendon, Z.L.}
}

@INPROCEEDINGS{Geipel09a,
  author = {Geipel, Markus M. and Schweitzer, Frank},
  title = {Software change dynamics: evidence from 35 java projects},
  booktitle = {Proceedings of the 7Th Joint Meeting of the European
	Software Engineering Conference and the Acm Sigsoft Symposium on
	the Foundations of Software Engineering (ESEC/FSE '09)},
  year = {2009},
  pages = {269--272},
  address = {New York, NY, USA},
  publisher = {ACM},
  doi = {http://doi.acm.org/10.1145/1595696.1595739},
  isbn = {978-1-60558-001-2},
  location = {Amsterdam, The Netherlands}
}

@ARTICLE{German03a,
  author = {German, D.M.},
  title = {{The GNOME Project: A Case Study of Open Source, Global Software
	Development}},
  journal = {Software Process Improvement and Practice},
  year = {2003},
  volume = {8},
  pages = {201--215},
  number = {4}
}

@ARTICLE{Gini21a,
  author = {Gini, Corrado},
  title = {{Measurement of Inequality of Incomes}},
  journal = {The Economic Journal},
  year = {1921},
  volume = {31},
  pages = {124--126},
  number = {121},
  month = mar,
  publisher = {Blackwell Publishing for the Royal Economic Society}
}

@BOOK{Glass03a,
  title = {{Facts and Fallacies of Software Engineering}},
  publisher = {Addison-Wesley Professional},
  year = {2003},
  author = {Glass, R.L.}
}

@BOOK{Glass98a,
  title = {{Software Runaways}},
  publisher = {Prentice Hall},
  year = {1998},
  author = {Glass, R.L.}
}

@INPROCEEDINGS{Glass89a,
  author = {Glass, R.},
  title = {{Software Maintenance Documentation}},
  booktitle = {Proceedings of the 7th Annual International Conference on Systems
	Documentation},
  year = {1989},
  pages = {99--101},
  organization = {ACM New York, NY, USA}
}

@INPROCEEDINGS{Godfrey01a,
  author = {Michael Godfrey and Qiang Tu},
  title = {{Growth, Evolution, and Structural Change in Open Source Software}},
  booktitle = {Proceedings of the 4th International Workshop on Principles of Software
	Evolution (IWPSE '01)},
  year = {2001},
  pages = {103--106},
  address = {Vienna, Austria},
  publisher = {ACM Press},
  bdsk-url-1 = {10.1145/602461.602482},
  url = {10.1145/602461.602482}
}

@INPROCEEDINGS{Godfrey00b,
  author = {Michael Godfrey and Qiang Tu},
  title = {{Evolution in Open Source Software: A Case Study}},
  booktitle = {Proceedings of International Conference on Software Maintenance (ICSM
	2000)},
  year = {2000},
  pages = {131-142},
  address = {Los Alamitos CA},
  publisher = {IEEE Computer Society Press},
  date-modified = {2008-05-26 12:51:41 +1000},
  keywords = {evolution}
}

@ARTICLE{Godfrey05a,
  author = {Godfrey, M.W. and Zou, L.},
  title = {{Using Origin Analysis to Detect Merging and Splitting of Source
	Code Entities}},
  journal = {IEEE Transactions on Software Engineering},
  year = {2005},
  volume = {31},
  pages = {166--181},
  number = {2},
  publisher = {IEEE Computer Society}
}

@INPROCEEDINGS{Godfrey00a,
  author = {Michael W. Godfrey and Eric H. S. Lee},
  title = {{Secrets from the Monster: Extracting {Mozilla}'s Software Architecture}},
  booktitle = {Proceedings of the Second International Symposium on Constructing Software Engineering
	Tools (CoSET-00)},
  year = {2000},
  month = jun,
  bdsk-url-1 = {http://plg.uwaterloo.ca/~migod/papers/coset00.pdf},
  keywords = {design-recovery},
  url = {http://plg.uwaterloo.ca/~migod/papers/coset00.pdf}
}

@CONFERENCE{Goeminnea09a,
  author = {Goeminnea, M. and Mensa, T.},
  title = {{Towards the Analysis of Evolution OSS Ecosystems}},
  booktitle = {The 8th Belgian-Netherlands Software Evolution Seminar (BENEVOL 2009)},
  year = {2009}
}

@ARTICLE{Goldstein04a,
  author = {Goldstein, ML and Morris, SA and Yen, GG},
  title = {{Problems With Fitting to the Power-Law Distribution}},
  journal = {The European Physical Journal B-Condensed Matter},
  year = {2004},
  volume = {41},
  pages = {255--258},
  number = {2},
  publisher = {Springer}
}

@ARTICLE{Gonzalez09a,
  author = {Gonzalez-Barahona, J.M. and Robles, G. and Michlmayr, M. and Amor,
	J.J. and German, D.M.},
  title = {{Macro-Level Software Evolution: A Case Study of a Large Software
	Compilation}},
  journal = {Empirical Software Engineering},
  year = {2009},
  volume = {14},
  pages = {262--285},
  number = {3},
  publisher = {Springer}
}

@ARTICLE{Gonzalez01a,
  author = {Gonz{\'a}lez-Barahona, J.M. and Perez, M.A.O. and de las Heras Quir{\'o}s,
	P. and Gonzalez, J.C. and Olivera, V.M.},
  title = {{Counting Potatoes: The Size of Debian 2.2}},
  journal = {Upgrade Magazine},
  year = {2001},
  volume = {2},
  pages = {60--66},
  number = {6}
}

@BOOK{Gosling00a,
  title = {{The Java Language Specification}},
  publisher = {Addison-Wesley Professional},
  year = {2000},
  author = {Gosling, J.}
}

@ARTICLE{Gould81a,
  author = {Gould, S.J.},
  title = {{Evolution As Fact and Theory}},
  journal = {Discover},
  year = {1981},
  volume = {37}
}

@BOOK{Gribbin00a,
  title = {{Q Is for Quantum: An Encyclopedia of Particle Physics}},
  publisher = {Free Press},
  year = {2000},
  author = {Gribbin, J.}
}

@INPROCEEDINGS{Grosser02a,
  author = {Grosser, D. and Sahraoui, H.A. and Valtchev, P.},
  title = {{Predicting Software Stability Using Case-Based Reasoning}},
  booktitle = {Proceedings of the 17th IEEE International Conference on Automated
	Software Engienering (ASE’02)},
  year = {2002},
  pages = {295--298}
}

@ARTICLE{Gyimothy05a,
  author = {Gyimothy, T. and Ferenc, R. and Siket, I.},
  title = {{Empirical Validation of Object-Oriented Metrics on Open Source Software
	for Fault Prediction}},
  journal = {IEEE Transactions on Software Engineering},
  year = {2005},
  volume = {31},
  pages = {897--910},
  number = {10}
}

@ARTICLE{Gunecskoru07a,
  author = {G{\"u}ne{\c{s}} Koru, A. and Liu, H.},
  title = {{Identifying and Characterizing Change-Prone Classes in Two Large-Scale
	Open-Source Products}},
  journal = {The Journal of Systems and Software},
  year = {2007},
  volume = {80},
  pages = {63--73},
  number = {1},
  publisher = {Elsevier}
}

@ARTICLE{Hahn08a,
  author = {Hahn, J. and Moon, J.Y. and Zhang, C.},
  title = {{Emergence of New Project Teams from Open Source Software Developer
	Networks: Impact of Prior Collaboration Ties}},
  journal = {Information Systems Research},
  year = {2008},
  volume = {19},
  pages = {369--391},
  number = {3}
}

@BOOK{Haken06a,
  title = {{Information and Self-Organization: A Macroscopic Approach to Complex
	Systems}},
  publisher = {Springer Verlag},
  year = {2006},
  author = {Haken, H.}
}

@ARTICLE{Halpern64a,
  author = {Halpern, M.},
  title = {{The Evolution of the Programming System}},
  journal = {Datamation},
  year = {1964},
  volume = {10},
  pages = {51--53},
  number = {7}
}

@INPROCEEDINGS{Hassan04a,
  author = {Ahmed Hassan and Richard Holt},
  title = {{Predicting Change Propagation in Software Systems}},
  booktitle = {Proceedings of the 20th IEEE International Conference on Software Maintenance
	(ICSM'04)},
  year = {2004},
  pages = {284-293},
  address = {Los Alamitos CA},
  month = sep,
  publisher = {IEEE Computer Society Press},
  bdsk-url-1 = {http://plg.uwaterloo.ca/~aeehassa/home/pubs/icsm2004.pdf},
  bdsk-url-2 = {http://dx.doi.org/10.1109/ICSM.2004.1357812},
  doi = {10.1109/ICSM.2004.1357812},
  keywords = {evolution},
  url = {http://plg.uwaterloo.ca/~aeehassa/home/pubs/icsm2004.pdf}
}

@BOOK{Hejlsberg03c,
  title = {{C\# Language Specification}},
  publisher = {Addison-Wesley Longman Publishing Co., Inc. Boston, MA, USA},
  year = {2003},
  author = {Hejlsberg, A. and Wiltamuth, S. and Golde, P.}
}

@MISC{Held08a,
  author = {Isaac Held},
  title = {{The Scientific Basis for Projections of Climate Change}},
  howpublished = {\url{http://web.princeton.edu/sites/pei/pdf/Held_slides.pdf}},
  year = {2008},
  key = {Held08},
  publisher = {Princeton University},
  url = {http://uc.princeton.edu/main/index.php/component/content/article/3181}
}

@BOOK{Henderson96a,
  title = {{Object-Oriented Metrics: Measures of Complexity}},
  publisher = {Prentice-Hall},
  year = {1996},
  author = {Brian Henderson-Sellers},
  isbn = {0-13-239872-9},
  keywords = {olit scglib}
}

@BOOK{HendersonSellers96a,
  title = {{Object-Oriented Metrics: Measures of Complexity}},
  publisher = {Prentice-Hall},
  year = {1996},
  author = {Brian Henderson-Sellers},
  isbn = {0-13-239872-9}
}

@INPROCEEDINGS{Herraiz09a,
  author = {Herraiz, I.},
  title = {{A Statistical Examination of the Evolution and Properties of Libre
	Software}},
  booktitle = {Proceedings of the International Conference on Software Maintenance (ICSM
	2009)},
  year = {2009},
  publisher = {IEEE}
}

@PHDTHESIS{Herraiz08b,
  author = {Herraiz, I.},
  title = {{A Statistical Examination of the Properties and Evolution of Libre
	Software}},
  school = {Universidad Rey Juan Carlos, Mostoles, Spain},
  year = {2008}
}

@CONFERENCE{Herraiz08a,
  author = {Herraiz, I. and Gonzalez-Barahona, J.M. and Robles, G.},
  title = {{Determinism and Evolution}},
  booktitle = {Proceedings of the 2008 International Working Conference on Mining
	Software Repositories},
  year = {2008},
  pages = {1--10},
  organization = {ACM New York, NY, USA}
}

@INPROCEEDINGS{Herraiz06a,
  author = {Herraiz, I. and Robles, G. and Gonzalez-Barahona, JM and Capiluppi,
	A. and Ramil, JF},
  title = {{Comparison Between SLOCs and Number of Files as Size Metrics for Software Evolution Analysis}},
  booktitle = {Proceedings	of the 10th European Conference on Software Maintenance and Reengineering, CSMR 2006. },
  year = {2006}
}

@BOOK{Hildebrand99a,
  title = {{Statistical Thinking for Managers}},
  publisher = {Brooks/Cole Publishing Co.},
  year = {1999},
  author = {Hildebrand, David K.},
  address = {Pacific Grove, CA, USA},
  isbn = {053435372X}
}

@INPROCEEDINGS{Hindle09a,
  author = {Hindle, A. and German, D.M. and Holt, R.C. and Godfrey, M.W.},
  title = {{Automatic Classification of Large Changes into Maintenance Categories}},
  booktitle = {Proceedings of 2009 IEEE International Conference on Program Comprehension
	(ICPC-09)},
  year = {2009}
}

@ARTICLE{Hitz96a,
  author = {Hitz, M. and Montazeri, B.},
  title = {{Chidamber and Kemerer's Metrics Suite: A Measurement Theory Perspective}},
  journal = {IEEE Transactions on Software Engineering},
  year = {1996},
  volume = {22},
  pages = {267--271},
  number = {4}
}

@INPROCEEDINGS{Hsi00a,
  author = {Hsi, I. and Potts, C.},
  title = {{Studying the Evolution and Enhancement of Software Features}},
  booktitle = {Proceedings of the 2000 IEEE International Conference on Software Maintenance},
  year = {2000},
  pages = {143--151}
}

@BOOK{SPSS08a,
  title = {{SPSS Base 17.0 User's Guide}},
  publisher = {SPSS, Chicago, IL},
  year = {2008},
  author = {Inc, SPSS}
}

@ARTICLE{ISO14764,
  author = {ISO},
  title = {{International Standard - ISO/IEC 14764 IEEE Std 14764-2006}},
  journal = {ISO/IEC 14764:2006 (E) IEEE Std 14764-2006 Revision of IEEE Std 1219-1998)},
  year = {2006},
  pages = {1--46}
}

@ARTICLE{Israeli09a,
  author = {Israeli, A. and Feitelson, D.G.},
  title = {{The Linux Kernel As a Case Study in Software Evolution}},
  journal = {Journal of Systems and Software},
  year = {2009},
  publisher = {Elsevier}
}

@INPROCEEDINGS{Izurieta06a,
  author = {Izurieta, Clemente and Bieman, James},
  title = {{The Evolution of Freebsd and Linux}},
  booktitle = {Proceedings of the ACM/IEEE International Symposium
	on Empirical Software Engineering ISESE 2006},
  year = {2006},
  pages = {204--211},
  address = {New York, NY, USA},
  publisher = {ACM},
  bdsk-url-1 = {http://doi.acm.org/10.1145/1159733.1159765},
  doi = {http://doi.acm.org/10.1145/1159733.1159765},
  isbn = {1-59593-218-6},
  location = {Rio de Janeiro, Brazil}
}

@ARTICLE{Janes06a,
  author = {Janes, A. and Scotto, M. and Pedrycz, W. and Russo, B. and Stefanovic,
	M. and Succi, G.},
  title = {{Identification of Defect-Prone Classes in Telecommunication Software
	Systems Using Design Metrics}},
  journal = {Information Sciences},
  year = {2006},
  volume = {176},
  pages = {3711--3734},
  number = {24},
  keywords = {defectprone, complexity},
  publisher = {Elsevier}
}

@INPROCEEDINGS{Jebara03a,
  author = {Jebara, T. and Kondor, R.},
  title = {{Bhattacharyya and Expected Likelihood Kernels}},
  booktitle = {Proceedings of the 16th Annual Conference on Learning
	Theory and Kernel Machines (COLT/Kernel 2003)},
  year = {2003},
  pages = {57},
  organization = {Springer}
}

@ARTICLE{Jenkins07a,
  author = {Jenkins, S. and Kirk, SR},
  title = {{Software Architecture Graphs As Complex Networks: A Novel Partitioning
	Scheme to Measure Stability and Evolution}},
  journal = {Information Sciences},
  year = {2007},
  volume = {177},
  pages = {2587--2601},
  number = {12},
  publisher = {Elsevier}
}

@ARTICLE{Jensen05a,
  author = {Jensen, C. and Scacchi, W.},
  title = {{Process Modeling Across the Web Information Infrastructure}},
  journal = {Software Process Improvement and Practice},
  year = {2005},
  volume = {10},
  pages = {255--272},
  number = {3}
}

@INPROCEEDINGS{Jensen04a,
  author = {Jensen, C. and Scacchi, W.},
  title = {{Data Mining for Software Process Discovery in Open Source Software
	Development Communities}},
  booktitle = {Proceedings of the International Workshop on Mining Software Repositories (MSR04)},
  year = {2004}
}

@INPROCEEDINGS{Johnson94a,
  author = {J. Howard Johnson},
  title = {{Substring Matching for Clone Detection and Change Tracking}},
  booktitle = {Proceedings of the International Conference on Software Maintenance (ICSM 94)},
  year = {1994},
  pages = {120-126},
  bdsk-url-1 = {http://dx.doi.org/10.1109/ICSM.1994.336783},
  date = {September 19-23},
  doi = {10.1109/ICSM.1994.336783},
  keywords = {clones}
}

@ARTICLE{Johnson88a,
  author = {Johnson, R.E. and Foote, B.},
  title = {{Designing Reusable Classes}},
  journal = {Journal of Object-Oriented Programming},
  year = {1988},
  volume = {1},
  pages = {22--35},
  number = {2}
}

@BOOK{Jones08a,
  title = {{Applied Software Measurement}},
  publisher = {McGraw-Hill Osborne Media},
  year = {2008},
  author = {Jones, Capers}
}

@PHDTHESIS{Kagdi08a,
  author = {Huzefa Kagdi},
  title = {{Mining Software Repositories to Support Software Evolution}},
  school = {Kent State University},
  year = {2008}
}

@ARTICLE{Kagdi07a,
  author = {Kagdi, H. and Collard, M.L. and Maletic, J.I.},
  title = {{A Survey and Taxonomy of Approaches for Mining Software Repositories
	in the Context of Software Evolution}},
  journal = {Journal of Software Maintenance and Evolution: Research and Practice},
  year = {2007},
  volume = {19},
  pages = {77--131},
  number = {2}
}

@INPROCEEDINGS{Kagdi06a,
  author = {Huzefa Kagdi and Shehnaaz Yusuf and Jonathan I. Maletic},
  title = {{Mining Sequences of Changed-files from Version Histories}},
  booktitle = {Proceedings of the 3rd International Workshop on Mining Software Repositories (MSR06},
  year = {2006},
  pages = {22--23}
}

@BOOK{Kan02a,
  title = {{Metrics and Models in Software Quality Engineering}},
  publisher = {Addison-Wesley Longman Publishing Co., Inc. Boston, MA, USA},
  year = {2002},
  author = {Kan, S.H.}
}

@INPROCEEDINGS{Kaner04a,
  author = {Cem Kaner and Walter P. Bond},
  title = {{Software Engineering Metrics: What do they Measure and how do we know?}},
  booktitle = {Proceedings of the 10TH International Software Metrics Symposium - Metrics 2004},
  year = {2004},
  publisher = {IEEE}
}

@CONFERENCE{Kapser06a,
  author = {Kapser, C. and Godfrey, M.W.},
  title = {{"Cloning Considered Harmful" Considered Harmful}},
  booktitle = {13th Working Conference on Reverse Engineering, WCRE'06. },
  year = {2006},
  pages = {19--28}
}

@INPROCEEDINGS{Kapser04a,
  author = {Kapser, C. and Godfrey, MW},
  title = {{Aiding Comprehension of Cloning Through Categorization}},
  booktitle = {Proceedings of the 7th International Workshop on Principles of Software Evolution},
  year = {2004},
  pages = {85--94}
}

@MISC{Saxon09a,
  author = {Michael Kay},
  title = {{Saxon Release Notes}},
  howpublished = {\url{http://www.saxonica.com/documentation/changes/intro.html}},
  year = {2009},
  bdsk-url-1 = {http://www.saxonica.com/documentation/changes/intro.html},
  journal = {Online at http://www.saxonica.com/documentation/changes/intro.html},
  url = {http://www.saxonica.com/documentation/changes/intro.html}
}

@MISC{Saxon02a,
  author = {Michael Kay},
  title = {{Saxon 6 Release Notes}},
  howpublished = {\url{http://saxon.sourceforge.net/saxon6.4.2/changes.html}},
  year = {2002},
  bdsk-url-1 = {http://saxon.sourceforge.net/saxon6.4.2/changes.html},
  journal = {Online at http://saxon.sourceforge.net/saxon6.4.2/changes.html},
  url = {http://saxon.sourceforge.net/saxon6.4.2/changes.html}
}

@MISC{Saxon02b,
  author = {Michael Kay},
  title = {{Saxon 6 Standards Conformance Guide}},
  howpublished = {\url{http://saxon.sourceforge.net/saxon6.4.2/conformance.html}},
  year = {2002},
  bdsk-url-1 = {http://saxon.sourceforge.net/saxon6.4.2/conformance.html},
  journal = {Online at http://saxon.sourceforge.net/saxon6.4.2/conformance.html},
  url = {http://saxon.sourceforge.net/saxon6.4.2/conformance.html}
}

@MISC{Kay01a,
  author = {Kay, M.},
  title = {{Anatomy of an XSLT Processor}},
  howpublished = {\url{http://www-106.ibm.com/developerworks/library/xxslt2}},
  year = {2001},
  bdsk-url-1 = {http://www-106.ibm.com/developerworks/library/xxslt2},
  journal = {IBM Developer Works},
  keywords = {xml},
  url = {http://www-106.ibm.com/developerworks/library/xxslt2}
}

@MISC{Saxon01a,
  author = {Michael Kay},
  title = {{Saxon 5 Release Notes}},
  howpublished = {\url{http://saxon.sourceforge.net/saxon6.4.2/changes5.html}},
  year = {2001},
  bdsk-url-1 = {http://saxon.sourceforge.net/saxon6.4.2/changes5.html},
  journal = {Online at http://saxon.sourceforge.net/saxon6.4.2/changes5.html},
  url = {http://saxon.sourceforge.net/saxon6.4.2/changes5.html}
}

@ARTICLE{Keller05a,
  author = {Keller, E.F.},
  title = {{Revisiting Scale-Free Networks}},
  journal = {BioEssays},
  year = {2005},
  volume = {27},
  pages = {1060--1068},
  number = {10}
}

@ARTICLE{Kemerer99a,
  author = {Kemerer, C.F. and Slaughter, S.},
  title = {{An Empirical Approach to Studying Software Evolution}},
  journal = {IEEE Transactions on Software Engineering},
  year = {1999},
  volume = {25},
  pages = {493-509},
  number = {4},
  month = {Jul/Aug},
  abstract = {With the approach of the new millennium, a primary focus in software
	engineering involves issues relating to upgrading, migrating, and
	evolving existing software systems. In this environment, the role
	of careful empirical studies as the basis for improving software
	maintenance processes, methods, and tools is highlighted. One of
	the most important processes that merits empirical evaluation is
	software evolution. Software evolution refers to the dynamic behaviour
	of software systems as they are maintained and enhanced over their
	lifetimes. Software evolution is particularly important as systems
	in organizations become longer-lived. However, evolution is challenging
	to study due to the longitudinal nature of the phenomenon in addition
	to the usual difficulties in collecting empirical data. We describe
	a set of methods and techniques that we have developed and adapted
	to empirically study software evolution. Our longitudinal empirical
	study involves collecting, coding, and analyzing more than 25000
	change events to 23 commercial software systems over a 20-year period.
	Using data from two of the systems, we illustrate the efficacy of
	flexible phase mapping and gamma sequence analytic methods, originally
	developed in social psychology to examine group problem solving processes.
	We have adapted these techniques in the context of our study to identify
	and understand the phases through which a software system travels
	as it evolves over time. We contrast this approach with time series
	analysis. Our work demonstrates the advantages of applying methods
	and techniques from other domains to software engineering and illustrates
	how, despite difficulties, software evolution can be empirically
	studied},
  bdsk-url-1 = {http://dx.doi.org/10.1109/32.799945},
  doi = {10.1109/32.799945},
  issn = {0098-5589},
  keywords = {software maintenance, software prototypingchange events, commercial
	software systems, dynamic behaviour, empirical approach, empirical
	data, empirical studies, flexible phase mapping, gamma sequence analytic
	methods, longitudinal nature, software engineering, software evolution,
	software maintenance processes}
}

@ARTICLE{Kemerer95a,
  author = {Chris F. Kemerer},
  title = {{Empirical Research on Software Complexity and Software Maintenance}},
  journal = {Annals of Software Engineering},
  year = {1995},
  volume = {1},
  pages = {1--22},
  number = {1}
}

@ARTICLE{Kemerer97a,
  author = {Kemerer, Chris F. and Slaughter, Sandra A.},
  title = {{Determinants of Software Maintenance Profiles: An Empirical Investigation}},
  journal = {Software Maintenance: Research and Practice},
  year = {1997},
  volume = {9},
  pages = {235--251},
  number = {4}
}

@INPROCEEDINGS{Khomh09a,
  author = {Khomh, F. and Di Penta, M. and Gueheneuc, Y.G.},
  title = {{An Exploratory Study of the Impact of Code Smells on Software Change-Proneness}},
  booktitle = {Proceedings of the 16th Working Conference on Reverse Engineering, 2009},
  year = {2009},
  pages = {75--84},
  organization = {IEEE Computer Society}
}

@INPROCEEDINGS{Kim05a,
  author = {Kim, M. and Sazawal, V. and Notkin, D. and Murphy, G.},
  title = {{An Empirical Study of Code Clone Genealogies}},
  booktitle = {Proceedings of the 10Th European	Software Engineering Conference Held Jointly With 13Th Acm Sigsoft
	International Symposium on Foundations of Software Engineering Foundations of Software Engineering},
  year = {2005},
  organization = {Association for Computing Machinery, Inc, One Astor Plaza, 1515 Broadway,
	New York, NY, 10036-5701, USA,}
}

@INPROCEEDINGS{Kitchenham88a,
  author = {Barbara A. Kitchenham},
  title = {{An Evaluation of Software Structure Metrics}},
  booktitle = {Proceedings of the 12th International Computer Software and Application
	Conference (COMPSAC 1988)},
  year = {1988},
  pages = {369-376},
  publisher = {IEEE Computer Society Press}
}

@ARTICLE{Kitchenham90a,
  author = {Kitchenham, BA and Pickard, LM and Linkman, SJ},
  title = {{An Evaluation of Some Design Metrics}},
  journal = {Software Engineering Journal},
  year = {1990},
  volume = {5},
  pages = {50--58},
  number = {1}
}

@CONFERENCE{Knight00a,
  author = {Knight, C. and Munro, M.},
  title = {{Mindless Visualisations}},
  booktitle = {The 6th ERCIM User Interfaces for All Workshop},
  year = {2000}
}

@ARTICLE{Koch07a,
  author = {Koch, S.},
  title = {{Software Evolution in Open Source Projects-A Large-Scale Investigation}},
  journal = {Journal of Software Maintenance and Evolution: Research and Practice},
  year = {2007},
  volume = {19},
  number = {6},
  publisher = {John Wiley \& Sons, Ltd. Chichester, UK}
}

@INPROCEEDINGS{Koch05a,
  author = {Koch, S.},
  title = {{Evolution of Open Source Software Systems--A Large-Scale Investigation}},
  booktitle = {Proceedings of the 1st International Conference on Open Source Systems},
  year = {2005},
  abstract = {In this paper, the evolution of a large sample of open source software
	projects will be analysed. The evolution of commercial systems has
	been an issue that has long been a centre of research, thus a coherent
	theoretical framework of software evolution has been developed and
	empirically tested. Therefore these results can be used to compare
	the situation in open source projects to the evolution of commercial
	projects. This allows to assess whether the underlying software process
	indeed significantly differs. The data collection methodology relying
	on a large software repository and the respective source code control
	systems is described, and an overview on the collected data on several
	thousand projects is given. The evolutionary behaviour is explored
	using both a linear and a quadratic model, with the quadratic model
	significantly outperforming the linear one. The most interesting
	fact is that while in the mean the growth rate is decreasing over
	time according to the laws of software evolution, especially larger
	projects with a higher number of participants might be more often
	able to sustain super-linear growth.}
}

@INPROCEEDINGS{Kontogiannis97a,
  author = {Kostas Kontogiannis},
  title = {{Evaluation Experiments on the Detection of Programming Patterns Using
	Software Metrics}},
  booktitle = {Proceedings of the Fourth Working Conference on Reverse Engineering},
  year = {1997},
  editor = {Ira Baxter and Alex Quilici and Chris Verhoef},
  pages = {44-54},
  publisher = {IEEE Computer Society}
}

@ARTICLE{Kontogiannis96a,
  author = {K. Kontogiannis and R. DeMori and E. Merlo and M. Galler and M. Bernstein},
  title = {{Pattern Matching for Clone and Concept Detection}},
  journal = {Journal of Automated Software Engineering},
  year = {1996},
  volume = {3},
  pages = {77-108},
  bdsk-url-1 = {http://dx.doi.org/10.1007/BF00126960},
  doi = {10.1007/BF00126960}
}

@INPROCEEDINGS{Koschke07a,
  author = {Koschke, R.},
  title = {{Survey of Research on Software Clones}},
  booktitle = {Proceedings of the Dagstuhl Seminar 06301: Duplication, Redundancy, and
	Similarity in Software},
  year = {2006}
}

@INPROCEEDINGS{Krinke01a,
  author = {Jens Krinke},
  title = {{Identifying Similar Code with Program Dependence Graphs}},
  booktitle = {Proceedings of the Eighth Working Conference on Reverse Engineering (WCRE'01)},
  year = {2001},
  pages = {301-309},
  month = oct,
  organization = {IEEE Computer Society},
  bdsk-url-1 = {http://dx.doi.org/10.1109/WCRE.2001.957835},
  doi = {10.1109/WCRE.2001.957835},
  keywords = {clones}
}

@BOOK{Kruchten04a,
  title = {{The Rational Unified Process}},
  publisher = {Addison-Wesley},
  year = {2004},
  author = {Philippe Kruchten},
  edition = {Third},
  isbn = {0321197704},
  keywords = {scglib}
}

@ARTICLE{Kruchten95a,
  author = {Philippe B. Kruchten},
  title = {{The 4+1 View Model of Architecture}},
  journal = {IEEE Software},
  year = {1995},
  volume = {12},
  pages = {42-50},
  number = {6},
  month = nov,
  keywords = {olit architecture}
}

@ARTICLE{Kructen95a,
  author = {Philippe B. Kruchten},
  title = {{The 4+1 View Model of Architecture}},
  journal = {IEEE Software},
  year = {1995},
  volume = {12},
  pages = {42-50},
  number = {6},
  month = nov,
  keywords = {olit architecture}
}

@INPROCEEDINGS{Tahvildari99a,
  author = {Ladan Tahvildari, Richard Gregory, Kostas Kontogiannis},
  title = {{An Approach for Measuring Software Evolution Using Source Code Features}},
  booktitle = {Proceedings of the IEEE Asia Pacific Software Engineering Conference},
  year = {1999},
  pages = {10--17},
  address = {Takamatsu, Japan},
  month = {December},
  organization = {IEEE},
  note = {Nothing much to say},
  abstract = {},
  date-modified = {2008-04-28 21:04:25 +1000},
  keywords = {evolution, metrics}
}

@ARTICLE{Lakhani03a,
  author = {Lakhani, K.R. and Von Hippel, E.},
  title = {{How Open Source Software Works: Free User-To-User Assistance}},
  journal = {Research policy},
  year = {2003},
  volume = {32},
  pages = {923--943},
  number = {6},
  publisher = {Elsevier}
}

@ARTICLE{Lakos96a,
  author = {Lakos, John},
  title = {{Large-scale C++ software design}},
  journal = {Reading, MA},
  year = {1996}
}

@INPROCEEDINGS{Lanza04b,
  author = {Michele Lanza},
  title = {{CodeCrawler --- Polymetric Views in Action}},
  booktitle = {Proceedings of the 19th IEEE International Conference on Automated
	Software Engineering (ASE 2004)},
  year = {2004},
  pages = {394-395},
  publisher = {IEEE CS Press},
  annote = {tooldemo},
  keywords = {mlanza moose-pub}
}

@INPROCEEDINGS{Lanza03a,
  author = {Michele Lanza},
  title = {{CodeCrawler --- Lessons Learned in Building a Software Visualization Tool}},
  booktitle = {Proceedings of CSMR 2003},
  year = {2003},
  pages = {409-418},
  publisher = {IEEE Press},
  abstract = {Software visualization tools face many challenges in terms of their
	implementation, including scalability, usability, adaptability, and
	durability. Such tools, like many other research tools, tend to have
	a short life cycle and are vulnerble to software evolution processes
	because of the complex problem domain and the constantly changing
	requirements which are dictated by research goals. In this paper
	we discuss the implementation of the software visualization tool
	CodeCrawler according to five criteria, namely the overall architecture,
	the internal architecture, the visualization engine, the metamodel
	and the interactive facilities. This discussion generates implementation
	recommendations and design guidelines that hold for our tool and
	the class of tools its stands for. We then also extract common design
	guidelines and recommendations that apply for other software visualization
	and general reverse engineering tools as well, and hope that these
	insights can be used fruitfully by other researchers in this field.},
  annote = {internationalconference},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Lanz03aLessonsLearned.pdf},
  bdsk-url-2 = {http://dx.doi.org/10.1109/CSMR.2003.1192450},
  doi = {10.1109/CSMR.2003.1192450},
  keywords = {recast03 scg-pub jb03 moose-pub},
  misc = {acceptance rate: 40/118 = 34\%},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Lanz03aLessonsLearned.pdf}
}

@PHDTHESIS{Lanza03b,
  author = {Michele Lanza},
  title = {{Object-Oriented Reverse Engineering --- Coarse-grained, Fine-grained,
	and Evolutionary Software Visualization}},
  school = {University of Berne},
  year = {2003},
  month = may,
  abstract = {The maintenance, reengineering, and evolution of object-oriented software
	systems has become a vital matter in today's software industry. Although
	most systems start off in a clean and well-designed state, with time
	they tend to gradually decay in quality, unless the systems are reengineered
	and adapted to the evolving requirements. However, before such legacy
	software systems can be reengineered and evolved, they must be reverse
	engineered, i.e., their structure and inner working must b e understood.
	This is difficult because of several factors, such as the sheer size
	of the systems, their complexity, their domain specificity, and in
	general the bad state legacy software systems are in. In this thesis
	we propose a visual approach to the reverse engineering of object-oriented
	software systems by means of polymetric views, lightweight visualizations
	of software enriched with metrics and other types of semantic information
	about the software, e.g., its age, version, abstractness, location,
	structure, function, etc. We present and discuss several polymetric
	views which allow us to understand three different aspects of object-oriented
	software, namely (1) coarse-grained aspects which allow for the understanding
	of very large systems, (2) fine -grained aspects which allow for
	the understanding of classes and class hierarchies, and (3) evolutionary
	aspects, which enable us to recover and understand the evolution
	of a software system. The combination of these three types of information
	can greatly reduce the time needed to gain an understanding of an
	object-oriented software system. Based on the application of our
	polymetric views, we present our reverse engineering methodology
	which we validated and refined on several occasions in industrial
	set tings. It allows us to explore and combine these three approaches
	into one single visual approach to understand software.},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/PhD/lanza-phd.pdf},
  keywords = {recast03 scg-pub skipdoi scg-phd evolution jb03 moose-pub},
  misc = {Recipient of the Denert-Stiftung Software Engineering Prize 2003},
  url = {http://www.iam.unibe.ch/~scg/Archive/PhD/lanza-phd.pdf}
}

@INPROCEEDINGS{Lanza03c,
  author = {Michele Lanza},
  title = {{Program Visualization Support for Highly Iterative Development Environments}},
  booktitle = {Proceedings of the 2nd International Workshop on Visualizing
	Software for Understanding and Analysis (VisSoft 2003)},
  year = {2003},
  pages = {62-67},
  publisher = {IEEE CS Press},
  abstract = {Software Visualization is, despite the many publications and advances
	in this research field, still not being considered by mainstream
	software industry: currently very few integrated development environments
	offer (if at all) only limited visualization support, and in general
	it can be said that software visualization is being ignored at a
	professional level by the average software developer. Moreover, even
	relatively successful software visualization tools (such as Rigi,
	Shrimp, JInsight, etc.) are seldom being used except by their developers
	themselves. In this position paper, based on our own experience and
	an analysis of the current state and possible future trends of integrated
	development environments, we put up a non-exhaustive list of features
	that software visualization tools should possess in the future to
	have more consideration by mainstream development.},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Lanz03cVisSoft.pdf},
  keywords = {recast04 scg-pub skipdoi jb04 moose-pub},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Lanz03cVisSoft.pdf}
}

@INPROCEEDINGS{Lanza03e,
  author = {Michele Lanza},
  title = {{CodeCrawler --- A Lightweight Software Visualization Tool}},
  booktitle = {Proceedings of the 2nd International Workshop on Visualizing
	Software for Understanding and Analysis (VisSoft 2003)},
  year = {2003},
  pages = {51-52},
  publisher = {IEEE CS Press},
  abstract = {CodeCrawler is a language independent software visu- alization tool.
	It is mainly targeted at visualizing object- oriented software, and
	in its newest implementation it has become a general information
	visualization tool. It has been validated in several industrial case
	studies over the past few years. It strongly adheres to lightweight
	princi- ples: CodeCrawler implements and visualizes polymetric views,
	lightweight visualizations of software enriched with semantic information
	such as software metrics and source code information.},
  annote = {tooldemo},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Lanz03eVisSoft.pdf},
  keywords = {recast04 scg-pub skipdoi jb04 moose-pub lanza},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Lanz03eVisSoft.pdf}
}

@INPROCEEDINGS{Lanza01c,
  author = {Michele Lanza},
  title = {{The Evolution Matrix: Recovering Software Evolution Using Software
	Visualization Techniques}},
  booktitle = {Proceedings of the International Workshop on Principles of
	Software Evolution (IWPSE, 2001)},
  year = {2001},
  pages = {37-42},
  abstract = {One of the major problems in software evolution is coping with the
	complexity which stems from the huge amount of data that must be
	considered. The current approaches to deal with that problem all
	aim at a reduction of complexity and a filtering of the relevant
	information. In this paper we propose an approach based on a com-
	bination of software visualization and software metrics which we
	have already successfully applied in the field of software reverse
	engineering. Using this approach we discuss a simple and effective
	way to visualize the evolution of software systems which helps to
	recover the evolution of object oriented software systems.},
  annote = {internationalworkshop},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Lanz01cEvolutionMatrix.pdf},
  bdsk-url-2 = {http://dx.doi.org/10.1145/602461.602467},
  doi = {10.1145/602461.602467},
  keywords = {scg-pub snf01 jb01 moose-pub},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Lanz01cEvolutionMatrix.pdf}
}

@INPROCEEDINGS{Lanza02b,
  author = {Michele Lanza and St\'ephane Ducasse},
  title = {{Beyond Language Independent Object-Oriented Metrics: Model Independent
	Metrics}},
  booktitle = {Proceedings of the 6th International Workshop on Quantitative Approaches
	in Object-Oriented Software Engineering},
  year = {2002},
  editor = {Fernando Brito e Abreu and Mario Piattini and Geert Poels and Houari
	A. Sahraoui},
  pages = {77-84},
  abstract = {Software Metrics have become essential in software engineering for
	several reasons, among which quality assessment and reengineering.
	In the context of the European Esprit Pro ject FAMOOS, whose main
	goal was to provide methodologies for the reengineering of large
	industrial software systems, we have developed the Moose Reengineering
	Environment, based on the language independent FAMIX metamodel. Moose
	includes a metrics engine which supports language independent metrics,
	since coping with software written in different implementation languages
	was one of the project's main constraints. Our current research is
	pushing us towards the development and implementation of a metametamodel,
	which would include our metamodel and allow for several extension
	in different research directions, among which concept analysis, knowledge
	management and software evolution. In this article we want to present
	our current and future work for the transition from language independent
	to domain independent metrics.},
  annote = {internationalworkshop},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Lanz02bModelIndependentMetrics.pdf},
  isbn = {84-699-8696-1},
  keywords = {scg-pub skipdoi jb02 snf02 stefPub moose-pub},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Lanz02bModelIndependentMetrics.pdf}
}

@INCOLLECTION{Lanza05b,
  author = {Michele Lanza and St\'ephane Ducasse},
  title = {{CodeCrawler--An Extensible and Language Independent 2D and 3D Software
	Visualization Tool}},
  booktitle = {Tools for Software Maintenance and Reengineering},
  publisher = {Franco Angeli},
  year = {2005},
  series = {RCOST / Software Technology Series},
  pages = {74-94},
  address = {Milano},
  abstract = {CodeCrawler is an extensible and language independent software visualization
	tool. It has been validated in several industrial case studies over
	the past years. CodeCrawler enables the fast exploration of new visualization
	ideas. It implements and visualizes polymetric views, visualizations
	of software enriched with information such as software metrics and
	other source code semantics. It provides a rich set of views that
	can be customized using a large set of metrics. While CodeCrawler
	is mainly targeted at visualizing object-oriented software, in its
	latest implementation it has become a general information visualization
	tool.},
  annote = {articlebook},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Lanz05bCCBookChapter.pdf},
  isbn = {88-464-6396-X},
  keywords = {scg-pub skipdoi stefPub recast05 jb05 moose-pub},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Lanz05bCCBookChapter.pdf}
}

@ARTICLE{Lanza03d,
  author = {Michele Lanza and St\'ephane Ducasse},
  title = {{Polymetric Views---A Lightweight Visual Approach to Reverse Engineering}},
  journal = {Transactions on Software Engineering (TSE)},
  year = {2003},
  volume = {29},
  pages = {782-795},
  number = {9},
  month = sep,
  abstract = {Reverse engineering software systems has become a major concern in
	software industry because of their sheer size and complexity. This
	problem needs to be tackled, since the systems in question are of
	considerable worth to their owners and maintainers. In this article
	we present the concept of a polymetric view, alightweight software
	visualization technique enriched with software metricsinformation.
	Polymetric views help to understand the structure and detectproblems
	of a software system in the initial phases of a reverse engineering
	process. We discuss thebenefits and limits of several predefined
	polymetric views we have implementedin our tool CodeCrawler. Moreover,
	based on clusters of different polymetricviews we have developed
	a methodology which supports and guides a software engineer in the
	first phases of a reverse engineering of a large software system.
	We have refined this methodology by repeatedly applying it on industrial
	systems, and illustrate it by applying a selection of polymetric
	views to a case study.},
  annote = {internationaljournal},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Lanz03dTSEPolymetric.pdf},
  bdsk-url-2 = {http://dx.doi.org/10.1109/TSE.2003.1232284},
  doi = {10.1109/TSE.2003.1232284},
  keywords = {scg-pub jb04 recast04 stefPub moose-pub},
  misc = {SCI impact factor 1.73},
  publisher = {IEEE Computer Society},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Lanz03dTSEPolymetric.pdf}
}

@INPROCEEDINGS{Lanza02a,
  author = {Michele Lanza and St\'ephane Ducasse},
  title = {{Understanding Software Evolution Using a Combination of Software
	Visualization and Software Metrics}},
  booktitle = {Proceedings of Langages et Mod\`eles \`a Objets (LMO'02)},
  year = {2002},
  pages = {135-149},
  address = {Paris},
  publisher = {Lavoisier},
  abstract = {Coping with huge amounts of data is one of the major problems in the
	context of software evolution. Current approaches reduce this complexity
	by filtering out irrelevant information. In this paper we propose
	an approach based on a combination of software visualization and
	software metrics, as software visualization is apt for complexity
	reduction and metrics introduce the possibility to qualify evolution.
	We discuss a simple and effective way to visualize the evolution
	of software systems which helps to recover the evolution of object
	oriented software systems. In addition we define a vocabulary that
	qualifies some specific situations that occurs when considering system
	evolution. },
  annote = {nationalconference},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Lanz02aEvolutionMatrix.pdf},
  keywords = {scg-pub skipdoi jb02 snf02 stefPub moose-pub},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Lanz02aEvolutionMatrix.pdf}
}

@INPROCEEDINGS{Lanza05a,
  author = {Michele Lanza and St\'ephane Ducasse and Harald Gall and Martin Pinzger},
  title = {{CodeCrawler --- An Information Visualization Tool for Program Comprehension}},
  booktitle = {Proceedings of the 27th IEEE International Conference on Software
	Engineering (ICSE 2005)},
  year = {2005},
  pages = {672-673},
  publisher = {ACM Press},
  annote = {tooldemo},
  keywords = {mlanza moose-pub}
}

@CONFERENCE{Lanza09a,
  author = {Lanza, M. and Gall, H. and Dugerdil, P.},
  title = {{Evospaces: Multi-Dimensional Navigation Spaces for Software Evolution}},
  booktitle = {European Conference on Software Maintenance and Reengineering},
  year = {2009},
  pages = {293--296},
  organization = {IEEE}
}

@BOOK{Lanza06a,
  title = {{Object-Oriented Metrics in Practice: Using Software Metrics to Characterize,
	Evaluate, and Improve the Design of Object-Oriented Systems}},
  publisher = {Springer},
  year = {2006},
  author = {Lanza, Michele and Marinescu, Radu}
}

@INPROCEEDINGS{Lehman96a,
  author = {Manny Lehman},
  title = {{Laws of Software Evolution Revisited}},
  booktitle = {Proceedings of the European Workshop on Software Process Technology},
  year = {1996},
  pages = {108--124},
  address = {Berlin},
  publisher = {Springer},
  keywords = {evolution}
}

@ARTICLE{Lehman96b,
  author = {Lehman, MM},
  title = {{Feedback in the Software Evolution Process}},
  journal = {Information and Software Technology},
  year = {1996},
  volume = {38},
  pages = {681--686},
  number = {11},
  publisher = {Elsevier}
}

@BOOK{Lehman85a,
  title = {{Program Evolution: Processes of Software Change}},
  publisher = {London Academic Press},
  year = {1985},
  author = {Manny Lehman and Les Belady},
  pages = {538},
  address = {London},
  bdsk-url-1 = {ftp://ftp.umh.ac.be/pub/ftp_infofs/1985/ProgramEvolution.pdf},
  isbn = {0-12-442440-6},
  keywords = {oorp evolution},
  url = {ftp://ftp.umh.ac.be/pub/ftp_infofs/1985/ProgramEvolution.pdf}
}

@INPROCEEDINGS{Lehman98a,
  author = {Manny Lehman and Dewayne Perry and Juan Ramil},
  title = {{Implications of Evolution Metrics on Software Maintenance}},
  booktitle = {Proceedings of the IEEE International Conference on Software Maintenance (ICSM'98)},
  year = {1998},
  pages = {208--217},
  address = {Los Alamitos CA},
  publisher = {IEEE Computer Society Press}
}

@ARTICLE{Lehman98b,
  author = {Lehman, MM and Perry, DE and Ramil, JF},
  title = {{On Evidence Supporting the Feast Hypothesis and the Laws of Software Evolution}},
  journal = {Proceedings of the Fifth International Software Metrics Symposium, Metrics 1998},
  year = {1998},
  pages = {84--88}
}

@ARTICLE{Lehman02a,
  author = {Lehman, M.M. and Ramil, J.F.},
  title = {{Software Evolution and Software Evolution Processes}},
  journal = {Annals of Software Engineering},
  year = {2002},
  volume = {14},
  pages = {275--309},
  number = {1},
  publisher = {Springer}
}

@ARTICLE{Lehman01a,
  author = {Lehman, M.M. and Ramil, J.F.},
  title = {{Rules and Tools for Software Evolution Planning and Management}},
  journal = {Annals of Software Engineering},
  year = {2001},
  volume = {11},
  pages = {15--44},
  number = {1},
  publisher = {Springer}
}

@INPROCEEDINGS{Lehman01b,
  author = {Manny Lehman and Juan Ramil},
  title = {Evolution in Software and Related Areas},
  booktitle = {Proceedings of the International Conference on Software Engineering (ICSE)},
  year = {2001},
  pages = {1--16}
}

@INPROCEEDINGS{Lehman01d,
  author = {Lehman, MM and Ramil, JF},
  title = {{An Approach to a Theory of Software Evolution}},
  booktitle = {Proceedings of the 4th International Workshop on Principles of Software
	Evolution},
  year = {2001},
  pages = {74},
  organization = {ACM}
}

@INPROCEEDINGS{Lehman01c,
  author = {Lehman, MM and Ramil, JF and Sandler, U.},
  title = {{An Approach to Modelling Long-Term Growth Trends in Software Systems}},
  booktitle = {Proceedings of the IEEE International Conference on Software Maintenance, 2001},
  year = {2001},
  pages = {219--228}
}

@INPROCEEDINGS{Lehman02b,
  author = {Manny Lehman and Juan F Ramil},
  title = {{An Overview of Some Lessons Learnt in FEAST}},
  booktitle = {Proceedings of the Eighth IEEE Workshop on Empirical Studies of Software Maintenance},
  year = {2002}
}

@ARTICLE{Lehman80a,
  author = {Lehman, M M.},
  title = {{Programs, Life Cycles, and Laws of Software Evolution}},
  journal = {Proceedings of the IEEE, Special Issue on Software Evolution},
  year = {1980},
  volume = {68},
  pages = {1060--1076},
  number = {9},
  month = sep
}

@INPROCEEDINGS{Lehman97a,
  author = {Lehman, M. M. and Perry, D. E. and Ramil, J. C. F. and Turski, W.
	M. and Wernik, P.},
  title = {{Metrics and Laws of Software Evolution -- The Nineties View}},
  booktitle = {Proceedings of the Fourth International Symposium on Software Metrics
	(Metrics '97)},
  year = {1997},
  pages = {20--32},
  address = {Albuquerque, New Mexico},
  month = nov,
  annote = {{Also as chapter 17 in Eman, K. El, Madhavji, N. M. (Eds.), Elements
	of Software Process Assessment and Improvement, IEEE CS Press, Los
	Alamitos, CA, 1999.}},
  bdsk-url-1 = {http://citeseer.ist.psu.edu/lehman97metrics.html},
  url = {http://citeseer.ist.psu.edu/lehman97metrics.html}
}

@ARTICLE{Lerner05a,
  author = {Lerner, J. and Tirole, J.},
  title = {{The Scope of Open Source Licensing}},
  journal = {Journal of Law, Economics, and Organization},
  year = {2005},
  volume = {21},
  pages = {20--56},
  number = {1},
  publisher = {Oxford Univ Press}
}

@ARTICLE{Li93a,
  author = {Li, W. and Henry, S.},
  title = {{Object-Oriented Metrics That Predict Maintainability}},
  journal = {Journal of systems and software},
  year = {1993},
  volume = {23},
  pages = {111--122},
  number = {2}
}

@ARTICLE{Lieberherr89a,
  author = {Lieberherr, K.J. and Holland, I.M.},
  title = {{Assuring Good Style for Object-Oriented Programs}},
  journal = {IEEE software},
  year = {1989},
  volume = {6},
  pages = {38--48},
  number = {5}
}

@ARTICLE{Lieberherr88a,
  author = {Lieberherr, K. and Holland, I. and Riel, A.},
  title = {{Object-Oriented Programming: an Objective Sense of Style}},
  journal = {ACM SIGPLAN Notices},
  year = {1988},
  volume = {23},
  pages = {323--334},
  number = {11},
  publisher = {ACM New York, NY, USA}
}

@BOOK{Lindholm99a,
  title = {{Java Virtual Machine Specification}},
  publisher = {Addison-Wesley Professional},
  year = {1999},
  author = {Lindholm, T. and Yellin, F.}
}

@article{Low98a,
 author = {Low, Douglas},
 title = {Protecting Java code via Code Obfuscation},
 journal = {Crossroads},
 volume = {4},
 number = {3},
 year = {1998},
 issn = {1528-4972},
 pages = {21--23},
 doi = {http://doi.acm.org/10.1145/332084.332092},
 publisher = {ACM},
 address = {New York, NY, USA},
 }

@conference{Tamada04a,
  title={{Design and Evaluation of Birthmarks for Detecting Theft of Java Programs}},
  author={Tamada, H. and Nakamura, M. and Monden, A. and Matsumoto, K.},
  booktitle={Proceedings of the IASTED International Conference on Software Engineering (IASTED SE 2004)},
  pages={569--575},
  year={2004}
}

@article{Parnas76a,
  title={{On the Design and Development of Product Families}},
  author={David Parnas},
  journal={IEEE Transactions on Software Engineering},
  volume={2},
  number={1},
  pages={1--9},
  year={1976}
}

@article{Igarashi00a,
  title={{On inner classes}},
  author={Igarashi, A. and Pierce, B.},
  journal={European Conference on Object-Oriented Programming (ECOOP'00)},
  pages={129--153},
  year={2000},
  publisher={Springer}
}

@BOOK{Lorenz97a,
  title = {{Objetc-Oriented Software Metrics: A Practical Guide}},
  publisher = {Prentice Hall},
  year = {1997},
  author = {Lorenz, M. and Kidd, J.}
}

@BOOK{Lorenz94a,
  title = {{Object-Oriented Software Metrics -- A practical guide}},
  publisher = {Prentice Hall, New Jersey},
  year = {1994},
  author = {Lorenz, M. and Kidd, J.}
}

@ARTICLE{Lorenz05a,
  author = {Lorenz, Max Otto},
  title = {{Methods of Measuring the Concentration of Wealth}},
  journal = {Publications of the American Statistical Association},
  year = {1905},
  volume = {9},
  pages = {209--219},
  number = {70},
  month = jun,
  publisher = {American Statistical Association}
}

@INPROCEEDINGS{Lumpe06e,
  author = {Lumpe, Markus},
  title = {{Using Metadata Transformations to Integrate Class Extensions in
	an Existing Class Hierarchy}},
  booktitle = {Proceedings of the Fourth ASIAN Symposium on Programming Languages
	and Systems (APLAS 2006)},
  year = {2006},
  editor = {Naoki Kobayashi},
  series = {LNCS 4279},
  pages = {290--306},
  address = {Sydney, Australia},
  month = nov,
  publisher = {Springer},
  keywords = {olit composition glue mop aplas06}
}

@PHDTHESIS{Lumpe99a,
  author = {Markus Lumpe},
  title = {{A $\pi$-calculus based Approach for Software Composition}},
  school = {University of Bern},
  year = {1999}
}

@INPROCEEDINGS{Lumpe10a,
  author = {Markus Lumpe and Samiran Mahmud and Rajesh Vasa},
  title = {{On the Use of Properties in Java Applications}},
  booktitle = {Proceedings of the 21st Australian Software Engineering Conference},
  year = {2010},
  organization = {ACS},
  keywords = {ASWEC}
}

@INPROCEEDINGS{Lumpe06a,
  author = {Lumpe, Markus and Schneider, Jean-Guy},
  title = {{On the Integration of Classboxes into C{\#}}},
  booktitle = {Proceedings of the 5th International Symposium on Software Composition
	(SC 2006)},
  year = {2006},
  editor = {L{\"o}we, Welf and S{\"u}dholt, Mario},
  series = {LNCS 4089},
  pages = {307--322},
  address = {Vienna, Austria},
  month = mar,
  publisher = {Springer},
  abstract = {Classboxes are a new module system for object-oriented languages defining
	a packaging and scoping mechanism for controlling the visibility
	of isolated extensions to portions of class-based systems. Unlike
	object-oriented specialization, the class extension mechanism supported
	by classboxes preserves the identity of extended classes and, therefore,
	all clients of extended classes can benefit from the applied extensions.
	In this paper, we present a language design and a corresponding implementation
	strategy for classboxes in C#. A particular challenge in incorporating
	classboxes into C# is to preserve the identity of extended classes
	as the .NET framework represents classes as metadata type declarations
	and access to classes by static links into metadata of the host assembly.
	However, the local refinement of an imported class results in a new
	metadata type declaration. In order to guarantee the identity of
	extended classes, new metadata type declarations have to be incorporated
	into the original metadata of imported classes. But this ``re-wiring''
	has to occur in a manner that is consistent with the Common Language
	Infrastructure (CLI).},
  issn_isbn = {ISBN 3-540-37657-7},
  keywords = {olit composition .NET C# cb sc06 sc2006},
  location = {Privat},
  url = {http://www.it.swin.edu.au/personal/jschneider/Pub/sc06.pdf http://dx.doi.org/10.1007/11821946_20}
}

@ARTICLE{Lumpe05a,
  author = {Markus Lumpe and Jean-Guy Schneider},
  title = {{A Form-Based Meta-Model for Software Composition}},
  journal = {Science of Computer Programming},
  year = {2005},
  volume = {56},
  pages = {59--78},
  number = {1-2},
  publisher = {Elsevier}
}

@ARTICLE{Madey02a,
  author = {Madey, G. and Freeh, V. and Tynan, R.},
  title = {{The Open Source Software Development Phenomemon: An Analysis based
	on Social Network Theory}},
  journal = {Americas Conference on Information Systems (AMCIS 2002)},
  year = {2002}
}

@CONFERENCE{Marinescu05a,
  author = {Marinescu, R.},
  title = {{Measurement and Quality in Object-Oriented Design}},
  booktitle = {21st International Conference on Software Maintenance (ICSM), Budapest
	Hungary},
  year = {2005}
}

@BOOK{Martin02b,
  title = {{Agile Software Development. Principles, Patterns, and Practices}},
  publisher = {Prentice-Hall},
  year = {2002},
  author = {Robert Cecil Martin},
  isbn = {0-13-914556-7}
}

@ARTICLE{Mccabe76a,
  author = {McCabe, Thomas J.},
  title = {{A Complexity Measure}},
  journal = {IEEE Transaction on Software Engineering},
  year = {1976},
  volume = {2},
  pages = {308-320},
  number = {4},
  month = dec
}

@ARTICLE{Mendel91a,
  author = {Mendel, JM},
  title = {{Tutorial on Higher-Order Statistics (Spectra) in Signal Processing
	and System Theory: Theoretical Results and Some Applications}},
  journal = {Proceedings of the IEEE},
  year = {1991},
  volume = {79},
  pages = {278--305},
  number = {3}
}

@INPROCEEDINGS{Mens08a,
  author = {Mens, T. and Fernandez-Ramil, J. and Degrandsart, S.},
  title = {{The Evolution of Eclipse}},
  booktitle = {Proceedings of the IEEE International Conference on Software Maintenance (ICSM 2008) },
  year = {2008},
  pages = {386--395},
  abstract = {We present a metrics-based study of the evolution of Eclipse, an open
	source integrated development environment, based on data from seven
	major releases, from releases 1.0 to 3.3. We investigated whether
	three of the laws of software evolution were supported by the data.
	We found that Eclipse displayed continual change and growth, hence
	supporting laws 1 and 6. Six size indicators, out of eight, closely
	followed trend models. Four were linear and two superlinear. We found
	evidence of increasing complexity (law 2) in only two indicators,
	out of five. At subproject level, size and complexity are not distributed
	uniformly, and subproject size can be modelled as a negative exponential
	function of the rank position. We encountered a range of different
	size and complexity trends across subprojects. Our approach and results
	can help in evaluating the future evolution of Eclipse, the evolution
	of other systems and in performing comparisons.},
  bdsk-url-1 = {http://dx.doi.org/10.1109/ICSM.2008.4658087},
  citeulike-article-id = {4059428},
  doi = {10.1109/ICSM.2008.4658087},
  journal = {Software Maintenance, 2008. ICSM 2008. IEEE International Conference
	on},
  keywords = {cs612},
  posted-at = {2009-02-16 17:20:43},
  priority = {2},
  url = {http://dx.doi.org/10.1109/ICSM.2008.4658087}
}

@ARTICLE{Mens04a,
  author = {Tom Mens and Juan F. Ramil and Michael W. Godfrey},
  title = {{Analyzing the Evolution of Large-Scale Software: Issue Overview}},
  journal = {Journal of Software Maintenance and Evolution: Research and Practice},
  year = {2004},
  volume = {16},
  pages = {363--365},
  number = {6},
  month = nov,
  issn = {1532-060X},
  publisher = {Wiley}
}

@INPROCEEDINGS{Merlo04a,
  author = {Merlo, E. and Antoniol, G. and Di Penta, M. and Rollo, VF},
  title = {{Linear Complexity Object-Oriented Similarity for Clone Detection and Software Evolution Analyses}},
  booktitle = {Proceedings of the 20th IEEE International Conference on Software Maintenance (ICSM 2004)},
  year = {2004},
  pages = {412--416}
}

@ARTICLE{Milgram01a,
  author = {Milgram, Stanley},
  title = {{Behavioural Study of Obedience}},
  journal = {Conflict, Order and Action: Readings in Sociology},
  year = {2001},
  pages = {134},
  publisher = {Canadian Scholars Pr}
}

@BOOK{Milgram74a,
  title = {{Obedience to Authority: an Experimental View}},
  publisher = {Taylor \& Francis},
  year = {1974},
  author = {Milgram, Stanley}
}

@ARTICLE{Milgram64a,
  author = {Milgram, Stanley},
  title = {{Group Pressure and Action Against a Person}},
  journal = {Journal of Abnormal and Social Psychology},
  year = {1964},
  volume = {69},
  pages = {137--143},
  number = {2}
}

@BOOK{Miller03a,
  title = {{The Common Language Infrastructure Annotated Standard}},
  publisher = {Addison-Wesley},
  year = {2003},
  author = {Miller, James S. and Ragsdale, Susann},
  series = {Microsoft .NET Development Series}
}

@INCOLLECTION{Mitchell02a,
  author = {Mitchell, Melanie and Newman, Mark },
  title = {{Complex Systems Theory and Evolution}},
  booktitle = {{Encyclopedia of Evolution}},
  publisher = {Oxford University Press},
  year = {2002},
  editor = {Pagel, M.},
  keywords = {olit evolution systems},
  location = {Privat},
  url = {http://www.santafe.edu/~mark/papers/cs.ps}
}

@INPROCEEDINGS{Mittermeir01a,
  author = {Mittermeir, R.T.},
  title = {{Software Evolution: Let's Sharpen the Terminology Before Sharpening
	(Out-Of-Scope) Tools}},
  booktitle = {Proceedings of the 4th International Workshop on Principles of Software
	Evolution},
  year = {2001},
  pages = {114--121},
  publisher = {ACM New York, NY, USA}
}

@INPROCEEDINGS{Mittermeir01b,
  author = {Mittermeir, R.T.},
  title = {{Software Evolution: Let Us Sharpen the Terminology Before Sharpening
	(out of Scope) Tools}},
  journal = {Proceedings of the 4th International Workshop on Principle of Software Evolution},
  year = {2001},
  pages = {114--121},
  publisher = {ACM New York, NY, USA}
}

@CONFERENCE{Mockus02b,
  author = {Mockus, A. and Herbsleb, J.D.},
  title = {{Why Not Improve Coordination in Distributed Software Development
	by Stealing Good Ideas from Open Source?}},
  booktitle = {International Conference on Software Engineering, ICSE 2002},
  year = {2002}
}

@article{Mockus02c,
  title={{Predicting Risk of Software Changes}},
  author={Mockus, A. and Weiss, D.M.},
  journal={Bell Labs Technical Journal},
  volume={5},
  number={2},
  pages={169--180},
  year={2002},
  publisher={John Wiley \& Sons}
}

@ARTICLE{Mockus02a,
  author = {Mockus, A. and T Fielfding, Roy and D Herbsleb, J.},
  title = {{Two Case Studies of Open Source Software Development: Apache and
	Mozilla}},
  journal = {ACM Transactions on Software Engineering and Methodology},
  year = {2002},
  volume = {11},
  pages = {309--346},
  number = {3}
}

@ARTICLE{Moon02a,
  author = {Moon, J.Y. and Sproull, L.},
  title = {{Essence of Distributed Work: The Case of the Linux Kernel}},
  journal = {Distributed Work},
  year = {2002},
  pages = {381--404},
  publisher = {MIT Press}
}

@ARTICLE{Murgia09a,
  author = {Murgia, A. and Concas, G. and Pinna, S. and Tonelli, R. and Turnu,
	I.},
  title = {{Empirical Study of Software Quality Evolution in Open Source Projects
	Using Agile Practices}},
  journal = {Arxiv preprint arXiv:0905.3287},
  year = {2009}
}

@ARTICLE{Myers03a,
  author = {Myers, C.R.},
  title = {{Software Systems As Complex Networks: Structure, Function, and Evolvability
	of Software Collaboration Graphs}},
  journal = {Physical Review E},
  year = {2003},
  volume = {68},
  pages = {46116},
  number = {4},
  publisher = {APS}
}

@INPROCEEDINGS{Nagappan06a,
  author = {Nagappan, N. and Ball, T. and Zeller, A.},
  title = {{Mining Metrics to Predict Component Failures}},
  booktitle = {Proceedings of the 28th International Conference on Software Engineering},
  year = {2006},
  pages = {452--461},
  organization = {ACM New York, NY, USA}
}

@INPROCEEDINGS{Nagasaka91a,
  author = {Nagasaka, A. and Tanaka, Y.},
  title = {{Automatic Video Indexing and Full-Video Search for Object Appearances}},
  booktitle = {Proceedings of the Second Working Conference on Visual Database Systems II (IFIP TC2/WG 2.6)},
  year = {1991},
  pages = {113--127},
  organization = {North-Holland Publishing Co. Amsterdam, The Netherlands, The Netherlands}
}

@INPROCEEDINGS{Nakakoji02a,
  author = {Nakakoji, K. and Yamamoto, Y. and Kishida, K. and Ye, Y.},
  title = {{Evolution Patterns of Open Source Software Systems and Communities}},
  booktitle = {Proceedings of the International Workshop on Principles of Software
	Evolution},
  year = {2002},
  pages = {76--85},
  publisher = {ACM Press New York}
}

@ARTICLE{Nash09a,
  author = {Nash, J.C.},
  title = {{Directions for Open Source Software Over the Next Decade}},
  journal = {Futures},
  year = {2009},
  volume = {42},
  pages = {427-433},
  number = {4},
  publisher = {Elsevier}
}

@ARTICLE{Nasseri09a,
  author = {Nasseri, E. and Counsell, S. and Shepperd, M.},
  title = {{Class Movement and Re-Location: an Empirical Study of Java Inheritance
	Evolution}},
  journal = {Journal of Systems and Software},
  year = {2009},
  publisher = {Elsevier}
}

@ARTICLE{Newman05a,
  author = {Newman, M.E.J.},
  title = {{Power Laws, Pareto Distributions and Zipf's Law}},
  journal = {Contemporary physics},
  year = {2005},
  volume = {46},
  pages = {323--352},
  number = {5},
  publisher = {London: Taylor \& Francis,[1959-}
}

@ARTICLE{Newman03a,
  author = {Newman, MEJ},
  title = {{The Structure and Function of Complex Networks}},
  journal = {Arxiv preprint cond-mat/0303516},
  year = {2003}
}

@ARTICLE{Oreilly99a,
  author = {O'Reilly, T.},
  title = {{Lessons from Open-Source Software Development}},
  journal = {Communications of the ACM},
  year = {1999},
  volume = {42},
  pages = {32--37},
  number = {4},
  publisher = {ACM New York, NY, USA}
}

@ARTICLE{Offutt92a,
  author = {Offutt, A.J.},
  title = {{Investigations of the Software Testing Coupling Effect}},
  journal = {ACM Transactions on Software Engineering and Methodology (TOSEM)},
  year = {1992},
  volume = {1},
  pages = {5--20},
  number = {1},
  publisher = {ACM}
}

@CONFERENCE{Offutt01a,
  author = {Offutt, A.J. and Untch, R.H.},
  title = {{Mutation 2000: Uniting the Orthogonal}},
  booktitle = {Mutation Testing for the New Century},
  year = {2001},
  pages = {44},
  organization = {Kluwer Academic Publishers}
}

@ARTICLE{Olague07a,
  author = {Olague, H.M. and Etzkorn, L.H. and Gholston, S. and Quattlebaum,
	S.},
  title = {{Empirical Validation of Three Software Metrics Suites to Predict
	Fault-Proneness of Object-Oriented Classes Developed Using Highly
	Iterative or Agile Software Development Processes}},
  journal = {IEEE Transactions on Software Engineering},
  year = {2007},
  volume = {33},
  pages = {402--419},
  number = {6},
  publisher = {IEEE Computer Society}
}

@ARTICLE{Olague08a,
  author = {Olague, H.M. and Etzkorn, L.H. and Messimer, S.L. and Delugach, H.S.},
  title = {{An Empirical Validation of Object-Oriented Class Complexity Metrics
	and Their Ability to Predict Error-Prone Classes in Highly Iterative,
	or Agile, Software: a Case Study}},
  journal = {Journal of Software Maintenance and Evolution: Research and Practice},
  year = {2008},
  volume = {20},
  pages = {171--197},
  number = {3},
  publisher = {John Wiley \& Sons}
}

@CONFERENCE{Orsila08a,
  author = {Orsila, H. and Geldenhuys, J. and Ruokonen, A. and Hammouda, I.},
  title = {{Update Propagation Practices in Highly Reusable Open Source Components}},
  booktitle = {Proceedings of the 20th World Computer Congress: Open Source Development, Communities and Quality},
  year = {2008},
  pages = {159},
  organization = {Springer Verlag}
}

@ARTICLE{Paulson04a,
  author = {Paulson, J.W. and Succi, G. and Eberlein, A.},
  title = {{An Empirical Study of Open-Source and Closed-Source Software Products}},
  journal = {IEEE Transactions on Software Engineering},
  year = {2004},
  pages = {246--256},
  abstract = {This paper describes an empirical study of open-source and closed-source
	software projects. The motivation for this research is to quantitatively
	investigate common perceptions about open-source projects, and to
	validate these perceptions through an empirical study. This paper
	investigates the hypothesis that open-source software grows more
	quickly, but does not find evidence to support this. The project
	growth is similar for all the projects in the analysis, indicating
	that other factors may limit growth. The hypothesis that creativity
	is more prevalent in open-source software is also examined, and evidence
	to support this hypothesis is found using the metric of functions
	added over time. The concept of open-source projects succeeding because
	of their simplicity is not supported by the analysis, nor is the
	hypothesis of open-source projects being more modular. However, the
	belief that defects are found and fixed more rapidly in open-source
	projects is supported by an analysis of the functions modified. The
	paper finds support for two of the five common beliefs and concludes
	that, when implementing or switching to the open-source development
	model, practitioners should ensure that an appropriate metrics collection
	strategy is in place to verify the perceived benefits.},
  publisher = {IEEE Computer Society}
}

@BOOK{Pfleeger01a,
  title = {{Software Engineering: Theory and Practice}},
  publisher = {Prentice Hall PTR Upper Saddle River, NJ, USA},
  year = {2001},
  author = {Pfleeger, S.L.}
}

@BOOK{Pfleeger98a,
  title = {{Software Engineering: Theory and Practice}},
  publisher = {Prentice-Hall, Inc. Upper Saddle River, NJ, USA},
  year = {1998},
  author = {Pfleeger, S.L.}
}

@BOOK{Pfleeger09a,
  title = {{Software Engineering: Theory and Practice}},
  publisher = {Prentice hall},
  year = {2009},
  author = {Pfleeger, S.L. and Atlee, J.M.},
  edition = {4}
}

@ARTICLE{Picard51a,
  author = {Picard, H. C.},
  title = {{A Note on the Maximum Value of Kurtosis}},
  journal = {Annals of Mathematical Statistics},
  year = {1951},
  volume = {22},
  pages = {480--482},
  number = {3},
  month = sep,
  publisher = {Institute of Mathematical Statistics}
}

@BOOK{Pigoski97a,
  title = {{Practical Software Maintenance}},
  publisher = {John Wiley},
  year = {1997},
  author = {Pigoski, T.M.}
}

@BOOK{Poppendieck06a,
  title = {{Implementing Lean Software Development}},
  publisher = {Addison Wesley, Boston, MA},
  year = {2006},
  author = {Poppendieck, M. and Poppendieck, T.}
}

@ARTICLE{Potanin05a,
  author = {Potanin, A. and Noble, J. and Frean, M. and Biddle, R.},
  title = {{Scale-Free Geometry in OO Programs}},
  journal = {Communications of the ACM},
  year = {2005},
  volume = {48},
  pages = {99--103},
  number = {5},
  month = {May},
  publisher = {ACM New York, NY, USA}
}

@BOOK{Pressman05a,
  title = {{Software Engineering: A Practitioner's Approach}},
  publisher = {McGraw-Hill},
  year = {2005},
  author = {Pressman, Roger S.},
  edition = {{Sixth}},
  bdsk-url-1 = {http://www.mhhe.com/pressman},
  issn_isbn = {ISBN 0-07-285318-2},
  keywords = {oose se selit sppm07},
  location = {Privat},
  url = {http://www.mhhe.com/pressman}
}

@MISC{CVS09a,
  author = {Price, D.},
  title = {{Concurrent Versions System}},
  howpublished = {\url{http://www.nongnu.org/cvs/}},
  year = {2009},
  bdsk-url-1 = {http://www.nongnu.org/cvs/},
  keywords = {cvs},
  url = {http://www.nongnu.org/cvs/}
}

@MISC{JMetric05a,
  author = {JMetric Project},
  title = {{JMetric - A Java Metric Analyzer}},
  howpublished = {\url{http://jmetric.sourceforge.net/}},
  year = {2005}
}

@ARTICLE{Purao03a,
  author = {Purao, S. and Vaishnavi, V.},
  title = {{Product Metrics for Object-Oriented Systems}},
  journal = {ACM Computing Surveys},
  year = {2003},
  volume = {35},
  pages = {191--221},
  number = {2},
  abstract = {We survey metrics proposed for object-oriented systems, focusing on
	product metrics. The survey is intended for the purposes of understanding,
	classifying, and analyzing ongoing research in object-oriented metrics.
	The survey applies fundamental measurement theory to artifacts created
	by development activities. We develop a mathematical formalism that
	captures this perspective clearly, giving appropriate attention to
	the peculiarities of the object-oriented system development process.
	Consistent representation of the available metrics, following this
	mathematical formalism, shows that current research in this area
	contains varying coverage of different products and their properties
	at different development stages. The consistent representation also
	facilitates several analyses including aggregation across metrics,
	usage across metrics, equivalent formulation of metrics by multiple
	researchers, and exploitation of traditional metrics for object-oriented
	metrics. We also trace the chronological development of research
	in this area, and uncover gaps that suggest opportunities for future
	research.},
  keywords = {Metrics}
}

@ARTICLE{Pyatt76a,
  author = {Pyatt, Graham},
  title = {{On the Interpretation and Disaggregation of Gini Coefficients}},
  journal = {The Economic Journal},
  year = {1976},
  volume = {86},
  pages = {243--255},
  number = {342},
  month = jun,
  publisher = {Royal Economic Society}
}

@ARTICLE{Rajlich00a,
  author = {Vaclav T. Rajlich and Keith H. Bennett},
  title = {{A Staged Model for the Software Life Cycle}},
  journal = {Computer},
  year = {2000},
  volume = {33},
  pages = {66-71},
  number = {7},
  address = {Los Alamitos, CA, USA},
  bdsk-url-1 = {http://doi.ieeecomputersociety.org/10.1109/2.869374},
  doi = {http://doi.ieeecomputersociety.org/10.1109/2.869374},
  issn = {0018-9162},
  publisher = {IEEE Computer Society}
}

@CONFERENCE{Ratzinger05a,
  author = {Ratzinger, J. and Fischer, M. and Gall, H.},
  title = {{Evolens: Lens-View Visualizations of Evolution Data}},
  booktitle = {Eighth International Workshop on Principles of Software Evolution},
  year = {2005},
  pages = {103-112},
  month = {Sept.},
  bdsk-url-1 = {http://dx.doi.org/10.1109/IWPSE.2005.16},
  doi = {10.1109/IWPSE.2005.16},
  issn = {1550-4077},
  keywords = {Java, data visualisation, program visualisation, software maintenance
	EvoLens, Java, lens-view visualization, software evolution data,
	software hierarchies, user-defined sliding time windows, visual representations}
}

@CONFERENCE{Ratzinger07a,
  author = {Ratzinger, J. and Sigmund, T. and Vorburger, P. and Gall, H.},
  title = {{Mining Software Evolution to Predict Refactoring}},
  booktitle = {First International Symposium on Empirical Software Engineering and Measurement (ESEM 2007)},
  year = {2007},
  pages = {354--363}
}

@BOOK{Raymond01a,
  title = {{The Cathedral and the Bazaar: Musings on Linux and Open Source by
	an Accidental Revolutionary}},
  publisher = {O'Reilly},
  year = {2001},
  author = {Raymond, E.S.}
}

@ARTICLE{Raymond99a,
  author = {Raymond, E.},
  title = {{The cathedral and the bazaar}},
  journal = {Knowledge, Technology, and Policy},
  year = {1999},
  volume = {12},
  pages = {23--49},
  number = {3},
  publisher = {Springer}
}

@ARTICLE{Reddy00a,
  author = {Reddy, A.},
  title = {{Java Coding Style Guide}},
  journal = {{Sun Microsystems}},
  year = {2000},
  publisher = {Sun MicroSystems},
  url = {http://java.sun.com/docs/codeconv/}
}

@ARTICLE{Reed01a,
  author = {Reed, W.J.},
  title = {{The Pareto, Zipf and Other Power Laws}},
  journal = {Economics Letters},
  year = {2001},
  volume = {74},
  pages = {15--19},
  number = {1},
  publisher = {Elsevier}
}

@PHDTHESIS{Rieger05a,
  author = {Matthias Rieger},
  title = {{Effective Clone Detection Without Language Barriers}},
  school = {University of Berne},
  year = {2005},
  month = jun,
  abstract = {Duplication is detected by comparing features of source fragments.
	The main problem for the detection is that source code is rarely
	copied exactly. The detection process must be able to ignore the
	superficial differences and to concentrate on fundamental similarities
	in order to find relevant duplication. While the high level information
	yielded by syntactic and semantic code analysis can be put to effective
	use, the drawbacks of these deep analysis techniques are most importantly
	the reduced adaptability to different programming languages. Because
	duplication is an ubiquitous problem, however, support for duplication
	detection and management is needed for every programming language
	in use. In this thesis we investigate how the premises of simplicity
	and adaptability influence all phases of the clone detection process.
	We analyze how line-based string matching as basic feature comparison
	technique can be augmented by minimal parsing to improve detection
	sensitivity. We investigate which code normalization techniques remove
	the superficial differences and reveal the similarities. We show
	how clone candidates are retrieved from the results of the basic
	comparison. We propose measures to select the relevant clones from
	the set of all retrieved candidates. We finally develop a collection
	of quantitative visualizations that enable the assessment of the
	copied code in the context of the entire system. We experimentally
	validate the proposed code normalization technique in terms of precision
	and recall, show how the proposed relevancy measures improve on simple
	size metrics, and discuss scalability issues. We also validate the
	line-based granularity, and perform a comparison of our technique
	with related string matching detectors.},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/PhD/rieger-phd.pdf},
  cvs = {MRiegerPhD},
  keywords = {scglib scg-pub skipdoi scg-phd evolution recast05 jb05 clones moose-pub},
  url = {http://www.iam.unibe.ch/~scg/Archive/PhD/rieger-phd.pdf}
}

@TECHREPORT{Rieger04a,
  author = {Matthias Rieger},
  title = {{Experiments on Language Independent Duplication Detection}},
  institution = {University of Bern, Institute of Applied Mathematics and Computer Science},
  year = {2004},
  number = {iam-04-002},
  abstract = {Duplicated code can have a severe, negative impact on the maintainability
	of large software systems. Techniques for detecting duplicated code
	exist but they rely mostly on parsers, technology that is often fragile
	in the face of different languages and dialects. In this paper we
	show that a lightweight approach based on simple string-matching
	can be effectively used to detect a significant amount of code duplication.
	The approach scales well, and can be easily adapted to different
	languages and contexts. We validate our approach by applying it to
	a number of industrial and open source case studies, involving five
	different implementation languages and ranging from 256KB to 13MB
	of source code. Finally, we compare our approach to a more sophisticated
	one employing parameterized matching, and demonstrate that little
	if anything is gained by adopting a more heavyweight approach.},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Rieg04a-IAM-04-002.pdf},
  keywords = {olit scg-pub skipdoi jb05 clones duploc recast05},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Rieg04a-IAM-04-002.pdf}
}

@INPROCEEDINGS{Rieger04b,
  author = {Matthias Rieger and St\'ephane Ducasse and Michele Lanza},
  title = {{Insights into System-Wide Code Duplication}},
  booktitle = {Proceedings of the 11th Working Conference on Reverse Engineering (WCRE'04)},
  year = {2004},
  pages = {100--109},
  month = nov,
  publisher = {IEEE Computer Society Press},
  abstract = {Duplication of code is a common phenomenon in the development and
	maintenance of large software systems. The detection and removal
	of duplicated code has become a standard activity during the refactoring
	phases of a software life-cycle. However, code duplication identification
	ends to produce large amounts of data making the understanding of
	the duplication situation as a whole difficult. Reengineers can easily
	lose sight of the forest for the trees. There is a need to support
	a qualitative analysis of the duplicated code. In this paper we propose
	a number of visualzations of duplicated source elements that support
	reengineers in answering questions, e.g., which parts of the sysem
	are connected by copied code or which parts of the sysem are copied
	the most.},
  annote = {internationalconference},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Rieg04bWCRE2004ClonesVisualization.pdf},
  bdsk-url-2 = {http://dx.doi.org/10.1109/WCRE.2004.25},
  cvs = {DuplocVizPaper},
  doi = {10.1109/WCRE.2004.25},
  keywords = {olit scg-pub jb05 recast05 stefPub clones},
  location = {Delft, The Netherlands},
  misc = {acceptance rate: 28/78 = 36\%},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Rieg04bWCRE2004ClonesVisualization.pdf}
}

@BOOK{Riel96a,
  title = {{Object-Oriented Design Heuristics}},
  publisher = {Addison Wesley},
  year = {1996},
  author = {Arthur Riel},
  pages = {400},
  address = {Boston MA},
  keywords = {scglib oorp}
}

@INPROCEEDINGS{Riva03a,
  author = {Riva, C. and Del Rosso, C.},
  title = {{Experiences With Software Product Family Evolution}},
  booktitle = {Proceedings of the Sixth International Workshop on Principles of Software Evolution, 2003},
  year = {2003},
  pages = {161-169},
  month = {Sept.},
  abstract = {The evolution of product family typically oscillates between growing
	and consolidating phases. The migration path starts from a copy/paste
	approach that offers the fastest time-to-market and then moves towards
	a mature software platform that offers a higher throughput of products.
	We have identified several issues that harm the evolution of the
	family: new requirements that can break the architectural integrity
	of the family, increasing level of bureaucracy in the organization
	and a slower process of change. We present two approaches for coping
	with the family evolution: architecture assessment and architecture
	reconstruction. We also present Nokia case studies where the methods
	have been successfully applied.},
  bdsk-url-1 = {http://dx.doi.org/10.1109/IWPSE.2003.1231223},
  doi = {10.1109/IWPSE.2003.1231223},
  keywords = {object-oriented programming, software architecture, software prototyping
	Nokia case studies, architectural integrity, architecture assessment,
	architecture reconstruction, copy-paste approach, migration path,
	software components, software platform, software product family evolution,
	time-to-market}
}

@INPROCEEDINGS{Robles05a,
  author = {Robles, G. and Amor, J.J. and Gonzalez-Barahona, J.M. and Herraiz,
	I.},
  title = {{Evolution and Growth in Large Libre Software Projects}},
  booktitle = {Proceedings of the International Workshop on Principles of Software Evolution},
  year = {2005},
  pages = {165--174},
  abstract = {Software evolution research has recently focused on new development
	paradigms, studying whether laws found in more classic development
	environments also apply. Previous works have pointed out that at
	least some laws seem not to be valid for these new environments and
	even Lehman has labeled those (up to the moment few) cases as anomalies
	and has suggested that further research is needed to clarify this
	issue. In this line, we consider in this paper a large set of libre
	(free, open source) software systems featuring a large community
	of users and developers. In particular, we analyze a number of projects
	found in literature up to now, including the Linux kernel. For comparison,
	we include other libre software kernels from the BSD family, and
	for completeness we consider a wider range of libre software applications.
	In the case of Linux and the other operating system kernels we have
	studied growth patterns also at the subsystem level. We have observed
	in the studied sample that super-linearity occurs only exceptionally,
	that many of the systems follow a linear growth pattern and that
	smooth growth is not that common. These results differ from the ones
	found generally in classical software evolution studies. Other behaviors
	and patterns give also a hint that development in the libre software
	world could follow different laws than those known, at least in some
	cases.}
}

@ARTICLE{Robles06a,
  author = {Robles, G. and Gonzalez-Barahona, J.M. and Merelo, J.J.},
  title = {{Beyond Source Code: The Importance of Other Artifacts in Software
	Development (A Case Study)}},
  journal = {The Journal of Systems and Software},
  year = {2006},
  volume = {79},
  pages = {1233--1248},
  number = {9},
  publisher = {Elsevier}
}

@ARTICLE{Rombach87a,
  author = {Rombach, HD},
  title = {{A Controlled Experiment on the Impact of Software Structure on Maintainability}},
  journal = {IEEE Transactions on Software Engineering},
  year = {1987},
  pages = {344--354}
}

@BOOK{Ross04a,
  title = {{Introduction to Probability and Statistics for Engineers and Scientists}},
  publisher = {Elsevier Academic Press},
  year = {2004},
  author = {Ross, S.M.}
}

@ARTICLE{Roy09a,
  author = {Roy, C.K. and Cordy, J.R. and Koschke, R.},
  title = {{Comparison and Evaluation of Code Clone Detection Techniques and
	Tools: a Qualitative Approach}},
  journal = {Science of Computer Programming},
  year = {2009},
  volume = {74},
  pages = {470--495},
  number = {7},
  publisher = {Elsevier}
}

@INPROCEEDINGS{Rysselberghe03c,
  author = {Filip Van Rysselberghe and Serge Demeyer},
  title = {{Reconstruction of Successful Software Evolution Using Clone Detection}},
  booktitle = {Proceedings of the International Workshop on Principles of Software Evolution (IWPSE)},
  year = {2003},
  pages = {126-130},
  bdsk-url-1 = {http://www.win.ua.ac.be/~fvrys/publications/},
  url = {http://www.win.ua.ac.be/~fvrys/publications/}
}

@INPROCEEDINGS{Salehie06a,
  author = {Salehie, M. and Li, S. and Tahvildari, L.},
  title = {{A Metric-Based Heuristic Framework to Detect Object-Oriented Design Flaws}},
  booktitle = {Proceedings of the 14th IEEE International Conference on Program
	Comprehension},
  year = {2006},
  pages = {159--168},
  organization = {IEEE Computer Society}
}

@INPROCEEDINGS{Sangal05a,
  author = {Sangal, N. and Jordan, E. and Sinha, V. and Jackson, D.},
  title = {{Using Dependency Models to Manage Complex Software Architecture}},
  booktitle = {Proceedings of the 20th Annual ACM SIGPLAN Conference on Object-Oriented
	Programming, Systems, Languages, and Applications (OOPSLA'05)},
  year = {2005},
  organization = {ACM}
}

@ARTICLE{Scacchi06a,
  author = {Scacchi, W.},
  title = {{Understanding Open Source Software Evolution}},
  journal = {Software Evolution and Feedback: Theory and Practice},
  year = {2006},
  publisher = {Wiley}
}

@ARTICLE{Scacchi05a,
  author = {Scacchi, W.},
  title = {{Socio-Technical Interaction Networks in Free/Open Source Software
	Development Processes}},
  journal = {Software Process Modeling},
  year = {2005},
  pages = {1--27},
  publisher = {Springer}
}

@ARTICLE{Scacchi02a,
  author = {Scacchi, W.},
  title = {{Is Open Source Software Development Faster, Better, and Cheaper than
	Software Engineering}},
  journal = {2nd Workshop on Open Source Software Engineering, Orlando, Florida,
	May},
  year = {2002}
}

@ARTICLE{Scacchi01a,
  author = {Scacchi, W.},
  title = {{Is Open Source Software Development Faster, Better, and Cheaper
	than Software Engineering}},
  journal = {Review of Economic Policy},
  year = {2001},
  volume = {17},
  pages = {248--264},
  number = {2}
}

@ARTICLE{Schach02a,
  author = {Schach, SR and Jin, B. and Wright, DR and Heller, GZ and Offutt,
	AJ},
  title = {{Maintainability of the Linux Kernel}},
  journal = {IEE Proceedings-Software},
  year = {2002},
  volume = {149},
  pages = {18}
}

@CONFERENCE{Schneider06a,
  author = {Schneider, J.G. and Vasa, R.},
  title = {{Agile Practices in Software Development-Experiences from Student
	Projects}},
  booktitle = {Australian Software Engineering Conference (2006)},
  year = {2006},
  pages = {10}
}

@ARTICLE{Schwarz78a,
  author = {Schwarz, G.},
  title = {{Estimating the Dimension of a Model}},
  journal = {The Annals of Statistics},
  year = {1978},
  volume = {6},
  pages = {461--464},
  number = {2},
  publisher = {JSTOR}
}

@BOOK{Sen97a,
  title = {{On Economic Inequality}},
  publisher = {Norton},
  year = {1997},
  author = {Sen, A. and Foster, J.}
}

@ARTICLE{Sharafat08a,
  author = {Sharafat, A.R. and Tahvildari, L.},
  title = {{Change Prediction in Object-Oriented Software Systems: A Probabilistic
	Approach}},
  journal = {Journal of Software},
  year = {2008},
  volume = {3},
  pages = {26},
  number = {5}
}

@ARTICLE{Shatnawi08a,
  author = {Shatnawi, R. and Li, W.},
  title = {{The Effectiveness of Software Metrics in Identifying Error-Prone
	Classes in Post-Release Software Evolution Process}},
  journal = {Journal of Systems and Software},
  year = {2008},
  volume = {81},
  pages = {1868--1882},
  number = {11},
  publisher = {Elsevier}
}

@ARTICLE{Shen85a,
  author = {Shen, VY and Yu, T.J. and Thebaut, SM and Paulsen, LR},
  title = {{Identifying Error-Prone Software—an Empirical Study}},
  journal = {IEEE Transactions on Software Engineering},
  year = {1985},
  pages = {317--324}
}

@ARTICLE{Slotine01a,
  author = {Slotine, J.J.E. and Lohmiller, W.},
  title = {{Modularity, Evolution, and the Binding Problem: A View from Stability
	Theory}},
  journal = {Neural networks},
  year = {2001},
  volume = {14},
  pages = {137--145},
  number = {2},
  publisher = {Elsevier}
}

@ARTICLE{Smith05a,
  author = {Smith, N. and Capiluppi, A. and Ramil, J.F.},
  title = {{A Study of Open Source Software Evolution Data Using Qualitative
	Simulation}},
  journal = {Software Process Improvement and Practice},
  year = {2005},
  volume = {10},
  pages = {287--300},
  number = {3},
  publisher = {John Wiley \& Sons, Inc, 605 Third Ave, New York, NY, 10016, USA,}
}

@BOOK{Sommerville00a,
  title = {{Software Engineering}},
  publisher = {Addison Wesley},
  year = {2000},
  author = {Ian Sommerville},
  edition = {Sixth},
  keywords = {book oorp scglib}
}

@MISC{Stata09a,
  author = {StataCorp},
  title = {{Stata Statistical Software: Release 11}},
  howpublished = {\url{http://www.stata.com}},
  year = {2009},
  journal = {StataCorp LP},
  url = {http://www.stata.com}
}

@ARTICLE{Stevens46a,
  author = {Stevens, S.S.},
  title = {{On the Theory of Scales of Measurement}},
  journal = {Science},
  year = {1946},
  volume = {103},
  pages = {677--680},
  number = {2684}
}

@ARTICLE{Stewart06a,
  author = {Stewart, K.J. and Darcy, D.P. and Daniel, S.L.},
  title = {{Opportunities and Challenges Applying Functional Data Analysis to
	the Study of Open Source Software Evolution}},
  journal = {Statistical Science},
  year = {2006},
  pages = {167--178},
  publisher = {Institute of Mathematical Statistics}
}

@ARTICLE{Subramaniam09a,
  author = {Subramaniam, C. and Sen, R. and Nelson, M.L.},
  title = {{Determinants of Open Source Software Project Success: a Longitudinal
	Study}},
  journal = {Decision Support Systems},
  year = {2009},
  volume = {46},
  pages = {576--585},
  number = {2},
  publisher = {Elsevier}
}

@ARTICLE{Subramanyam03a,
  author = {Subramanyam, R. and Krishnan, M.S.},
  title = {{Empirical Analysis of CK Metrics for Object-Oriented Design Complexity:
	Implications for Software Defects}},
  journal = {IEEE Transactions on Software Engineering},
  year = {2003},
  volume = {29},
  pages = {297--310},
  number = {4},
  publisher = {Institute of Electrical and Electronics Engineers, Inc, 445 Hoes
	Ln, Piscataway, NJ, 08854-1331, UK,}
}

@ARTICLE{Succi01a,
  author = {Succi, G. and Paulson, J. and Eberlein, A.},
  title = {{Preliminary Results from an Empirical Study on the Growth of Open
	Source and Commercial Software Products}},
  journal = {Third International Workshop on Economics-Driven Software Engineering Research (EDSER'03)},
  year = {2001},
  pages = {14--15}
}

@ARTICLE{Succi05a,
  author = {Succi, G. and Pedrycz, W. and Djokic, S. and Zuliani, P. and Russo,
	B.},
  title = {{An Empirical Exploration of the Distributions of the Chidamber and
	Kemerer Object-Oriented Metrics Suite}},
  journal = {Empirical Software Engineering},
  year = {2005},
  volume = {10},
  pages = {81--104},
  number = {1},
  abstract = {The object-oriented metrics suite proposed by Chidamber and Kemerer
	(CK) is a measurement approach towards improved object-oriented design
	and development practices. However, existing studies evidence traces
	of collinearity between some of the metrics and low ranges of other
	metrics, two facts which may endanger the validity of models based
	on the CK suite. As high correlation may be an indicator of collinearity,
	in this paper, we empirically determine to what extent high correlations
	and low ranges might be expected among CK metrics. To draw as much
	general conclusions as possible, we extract the CK metrics from a
	large data set (200 public domain projects) and we apply statistical
	meta-analysis techniques to strengthen the validity of our results.
	Homogenously through the projects, we found a moderate (0.50) to
	high correlation (>0.80) between some of the metrics and low ranges
	of other metrics. Results of this empirical analysis supply researchers
	and practitioners with three main advises: a) to avoid the use in
	prediction systems of CK metrics that have correlation more than
	0.80 b) to test for collinearity those metrics that present moderate
	correlations (between 0.50 and 0.60) c) to avoid the use as response
	in continuous parametric regression analysis of the metrics presenting
	low variance. This might therefore suggest that a prediction system
	may not be based on the whole CK metrics suite, but only on a subset
	consisting of those metrics that do not present either high correlation
	or low ranges.},
  publisher = {Springer}
}

@ARTICLE{Succi03a,
  author = {Succi, G. and Pedrycz, W. and Stefanovic, M. and Miller, J.},
  title = {{Practical Assessment of the Models for Identification of Defect-Prone
	Classes in Object-Oriented Commercial Systems Using Design Metrics}},
  journal = {The Journal of Systems and Software},
  year = {2003},
  volume = {65},
  pages = {1--12},
  number = {1},
  publisher = {Elsevier}
}

@ARTICLE{Swain91a,
  author = {Swain, M.J. and Ballard, D.H.},
  title = {{Color Indexing}},
  journal = {International Journal of Computer Vision},
  year = {1991},
  volume = {7},
  pages = {11--32},
  number = {1},
  publisher = {Springer}
}

@INPROCEEDINGS{Swanson76a,
  author = {Swanson, E.B.},
  title = {{The Dimensions of Maintenance}},
  booktitle = {Proceedings of the 2nd International Conference on Software Engineering},
  year = {1976},
  pages = {492-497}
}

@INPROCEEDINGS{Systa00a,
  author = {T. Systa and P. Yu and H. Muller},
  title = {Analyzing Java Software by Combining Metrics and Program Visualization},
  booktitle = {Proceedings of the 4th European Conference on Software Maintenance and Reengineering},
  year = {2000},
  pages = {199--208},
  address = {Zurich, Switzerland},
  month = {February},
  organization = {IEEE},
  publisher = {IEEE},
  abstract = {Shimba, a prototype reverse engineering environment, has been built
	to support the understanding of Java software. Shimba uses Rigi and
	SCED to analyze, visualize, and explore the static and dynamic aspects,
	respectively, of the subject system. The static software artifacts
	and their dependencies are extracted from Java byte code and viewed
	as directed graphs using the Rigi reverse engineering environment.
	The static dependency graphs of a subject system can be annotated
	with attributes, such as software quality measures, and then be analyzed
	and visualized using scripts through the end-user programmable interface.Shimba
	has recently been extended with the Chidamber and Kemerer suite of
	object-oriented metrics. The metrics measure properties of the classes,
	the inheritance hierarchy, and the interaction among classes of a
	subject system. Since Shimba is primarily intended for the analysis
	and exploration of Java software, the metrics have been tailored
	to measure properties of software components written in Java.We show
	how these metrics can be applied in the context of Understanding
	software systems using a reverse engineering environment. The static
	dependency graphs of the system under investigation are decorated
	with measures obtained by applying the object-oriented metrics to
	selected software components.Shimba provides tools to examine these
	measures, to find software artifacts that have values that are in
	a given range, and to detect correlations among different measures.
	The object-oriented analysis of the subject Java system can be investigated
	further by exporting the measures to a spreadsheet.}
}

@INPROCEEDINGS{Tamai02a,
  author = {Tamai, T. and Nakatani, T.},
  title = {{Analysis of Software Evolution Processes Using Statistical Distribution
	Models}},
  booktitle = {{Proceedings of the International Workshop on Principles of Software
	Evolution}},
  year = {2002},
  pages = {120--123},
  publisher = {ACM Press New York, NY, USA}
}

@CONFERENCE{Tamai98a,
  author = {Tamai, T. and Nakatani, T.},
  title = {{An Empirical Study of Object Evolution Processes}},
  booktitle = {International Workshop on Principles of Software Evolution (IWPSE'98)},
  year = {1998},
  pages = {33--37}
}

@ARTICLE{Tang09a,
  author = {Tang, A. and Han, J. and Vasa, R.},
  title = {{Software Architecture Design Reasoning: A Case for Improved Methodology
	Support}},
  journal = {IEEE Software},
  year = {2009},
  volume = {26},
  pages = {43--49},
  number = {2}
}

@BOOK{Tennant01a,
  title = {{Six Sigma: SPC and TQM in Manufacturing and Services}},
  publisher = {Gower Publishing, Ltd.},
  year = {2001},
  author = {Tennant, G.}
}

@CONFERENCE{Terceiro09a,
  author = {Terceiro, A. and Chavez, С.},
  title = {{Structural Complexity Evolution in Free Software Projects: A Case
	Study}},
  booktitle = {QACOS-OSSPL: A Joint Workshop of QACOS and OSSPL},
  year = {2009}
}

@ARTICLE{Tesfatsion02a,
  author = {Tesfatsion, L.},
  title = {{Agent-Based Computational Economics: Growing Economies from the
	Bottom Up}},
  journal = {Artificial life},
  year = {2002},
  volume = {8},
  pages = {55--82},
  number = {1},
  publisher = {MIT Press}
}

@BOOK{Thai02a,
  title = {{.NET Framework Essentials}},
  publisher = {O'Reilly \& Associates, Inc.},
  year = {2002},
  author = {Thai, T.L. and Lam, H.}
}

@BOOK{Thibaut86a,
  title = {{The Social Psychology of Groups}},
  publisher = {Transaction Publishers},
  year = {1986},
  author = {Thibaut, J.W. and Kelley, H.H.}
}

@ARTICLE{Thomas09a,
  author = {Thomas, LG and Schach, SR and Heller, GZ and Offutt, J.},
  title = {{Impact of Release Intervals on Empirical Research Into Software
	Evolution, With Application to the Maintainability of Linux}},
  journal = {Software, IET},
  year = {2009},
  volume = {3},
  pages = {58--66},
  number = {1}
}

@ARTICLE{Timmermann99a,
  author = {Timmermann, A. and Oberhuber, J. and Bacher, A. and Esch, M. and
	Latif, M. and Roeckner, E.},
  title = {{Increased El Nin{\\"A}o Frequency In a Climate Model Forced by Future
	Greenhouse Warming}},
  journal = {Nature},
  year = {1999},
  volume = {398},
  pages = {694--697}
}

@BOOK{Trivedi08a,
  title = {{Probability \& Statistics with Reliability, Queuing and Computer
	Science Applications}},
  publisher = {Wiley India Pvt. Ltd.},
  year = {2008},
  author = {Trivedi, K.S.}
}

@ARTICLE{Tsantalis05a,
  author = {Nikolaos Tsantalis and Alexander Chatzigeorgiou and George Stephanides},
  title = {{Predicting the Probability of Change in Object-Oriented Systems}},
  journal = {IEEE Transactions on Software Engineering},
  year = {2005},
  volume = {31},
  pages = {601-614},
  number = {7},
  address = {Los Alamitos, CA, USA},
  bdsk-url-1 = {http://doi.ieeecomputersociety.org/10.1109/TSE.2005.83},
  doi = {http://doi.ieeecomputersociety.org/10.1109/TSE.2005.83},
  issn = {0098-5589},
  publisher = {IEEE Computer Society}
}

@INPROCEEDINGS{Godfrey02a,
  author = {Michael Godfrey Qiang Tu},
  title = {{Tracking Structural Evolution using Origin Analysis}},
  booktitle = {Proceedings of the International Workshop on Principles of Software Evolution},
  year = {2002},
  pages = {117-119},
  organization = {SIGSOFT},
  publisher = {ACM Press},
  bdsk-url-1 = {http://plg.uwaterloo.ca/~migod/papers/iwpse02.pdf},
  url = {http://plg.uwaterloo.ca/~migod/papers/iwpse02.pdf}
}

@ARTICLE{Turski02a,
  author = {Turski, W.M.},
  title = {{The Reference Model for Smooth Growth of Software Systems Revisited}},
  journal = {IEEE Transactions on Software Engineering},
  year = {2002},
  volume = {28},
  pages = {814--815},
  number = {8},
  publisher = {IEEE Computer Society}
}

@ARTICLE{Turski96a,
  author = {Turski, W.M.},
  title = {{Reference Model for Smooth Growth of Software Systems}},
  journal = {IEEE Transactions on Software Engineering},
  year = {1996},
  volume = {22},
  pages = {599--600},
  number = {8},
  publisher = {IEEE Press Piscataway, NJ, USA}
}

@ARTICLE{Tversky86a,
  author = {Tversky, A. and Kahneman, D.},
  title = {{Rational Choice and the Framing of Decisions}},
  journal = {Journal of business},
  year = {1986},
  volume = {59},
  pages = {251},
  number = {S4},
  publisher = {UChicago Press}
}

@ARTICLE{Tversky81a,
  author = {Tversky, Amos and Kahneman, Daniel},
  title = {{The Framing of Decisions and the Psychology of Choice}},
  journal = {Science},
  year = {1981},
  volume = {211},
  pages = {453--458},
  number = {4481},
  month = jan
}

@MISC{HDR07a,
  author = {{United Nations Devlopment Programme}},
  title = {{Human Development Report 2007/2008}},
  howpublished = {available at http://hdr.undp.org},
  year = {2007},
  key = {UNDP}
}

@ARTICLE{Valverde02a,
  author = {S. Valverde and R. Ferrer Cancho and RV Sole},
  title = {{Scale-Free Networks from Optimal Design}},
  journal = {Europhysics Letters},
  year = {2002},
  volume = {60},
  pages = {512--517},
  number = {4}
}

@INPROCEEDINGS{Rysselberghe04a,
  author = {Van Rysselberghe, F. and Demeyer, S.},
  title = {{Evaluating Clone Detection Techniques from a Refactoring Perspective}},
  booktitle = {Proceedings of the 19th International Conference on Automated Software Engineering (2004)},
  year = {2004},
  pages = {336--339}
}

@INPROCEEDINGS{Vasa09a,
  author = {Vasa, R. and Lumpe, M. and Branch, P. and Nierstrasz, O.},
  title = {{Comparative Analysis of Evolving Software Systems Using the Gini
	Coefficient}},
  booktitle = {Proceedings of the 25th IEEE International Conference on Software
	Maintenance (ICSM'09)},
  year = {2009},
  publisher = {IEEE Computer Society},
  date-added = {2009-11-07 10:17:25 +1100},
  date-modified = {2009-11-07 10:22:06 +1100},
  keywords = {ICSE09}
}

@INPROCEEDINGS{Vasa07a,
  author = {Rajesh Vasa and Markus Lumpe and Jean-Guy Schneider},
  title = {{Patterns of Component Evolution}},
  booktitle = {Proceedings of the 6th International Symposium on Software Composition (SC 2007)},
  year = {2007},
  editor = {Lumpe, Markus and Vanderperren, Wim},
  pages = {244--260},
  address = {Braga, Portugal},
  month = mar,
  publisher = {Springer},
  abstract = {Contemporary software systems are composed of many components, which,
	in general, undergo phased and incremental development. In order
	to facilitate the corresponding construction process, it is important
	that the development team in charge has a good understanding of how
	individual software components typically evolve. Furthermore, software
	engineers need to be able to recognize abnormal patterns of growth
	with respect to size, structure, and complexity of the components
	and the resulting composite. Only if a development team understands
	the processes that underpin the evolution of software systems, will
	they be able to make better development choices. In this paper, we
	analyze recurring structural and evolutionary patterns that we have
	observed in public-domain software systems built using object-oriented
	programming languages. Based on our analysis, we discuss common growth
	patterns found in present-day component-based software systems and
	illustrate simple means to aid developers in achieving a better understanding
	of those patterns. As a consequence, we hope to raise the awareness
	level in the community on how component-based software systems tend
	to naturally evolve.},
  bdsk-file-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAjIAAAAAAjIAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMb/ydVIKwAAAA+a5h9WYXNhMDctUGF0dGVybnMgb2YgQyMxOTRCQTAucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGUugxvN1DwAAAAAAAAAAAAIABQAACSAAAAAAAAAAAAAAAAAAAAAJRXZvbHV0aW9uAAAQAAgAAMb/LyUAAAARAAgAAMby2l8AAAABABgAD5rmAA+azgAPl9wAD26uAA5LHAAOSKsAAgBmTWFjaW50b3NoIEhEOlVzZXJzOnJ2YXNhOkRvY3VtZW50czpSZXNlYXJjaDpQYXBlciBDb2xsZWN0aW9uOkV2b2x1dGlvbjpWYXNhMDctUGF0dGVybnMgb2YgQyMxOTRCQTAucGRmAA4AVgAqAFYAYQBzAGEAMAA3AC0AUABhAHQAdABlAHIAbgBzACAAbwBmACAAQwBvAG0AcABvAG4AZQBuAHQAIABFAHYAbwBsAHUAdABpAG8AbgAuAHAAZABmAA8AGgAMAE0AYQBjAGkAbgB0AG8AcwBoACAASABEABIAZFVzZXJzL3J2YXNhL0RvY3VtZW50cy9SZXNlYXJjaC9QYXBlciBDb2xsZWN0aW9uL0V2b2x1dGlvbi9WYXNhMDctUGF0dGVybnMgb2YgQ29tcG9uZW50IEV2b2x1dGlvbi5wZGYAEwABLwAAFQACAAz//wAAgAXSHB0eH1gkY2xhc3Nlc1okY2xhc3NuYW1lox8gIV1OU011dGFibGVEYXRhVk5TRGF0YVhOU09iamVjdF8QXi4uLy4uL0RvY3VtZW50cy9SZXNlYXJjaC9QYXBlciBDb2xsZWN0aW9uL0V2b2x1dGlvbi9WYXNhMDctUGF0dGVybnMgb2YgQ29tcG9uZW50IEV2b2x1dGlvbi5wZGbSHB0kJaIlIVxOU0RpY3Rpb25hcnkSAAGGoF8QD05TS2V5ZWRBcmNoaXZlcgAIABEAFgAfACgAMgA1ADoAPABFAEsAUgBdAGUAbABvAHEAcwB2AHgAegB8AIYAkwCYAKAC1gLYAt0C5gLxAvUDAwMKAxMDdAN5A3wDiQOOAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAA6A=},
  bdsk-url-1 = {http://www.it.swin.edu.au/personal/jschneider/Pub/sc07.pdf},
  keywords = {olit selit metrics evolution sc07 cecses-pub},
  location = {Privat},
  url = {http://www.it.swin.edu.au/personal/jschneider/Pub/sc07.pdf}
}

@INPROCEEDINGS{Vasa03a,
  author = {Rajesh Vasa and Jean-Guy Schneider},
  title = {{Evolution of Cyclomatic Complexity in Object Oriented Software}},
  booktitle = {Proceedings of the 7th ECOOP Workshop on Quantitative Approaches in Object-Oriented
	Software Engineering (QAOOSE '03)},
  year = {2003},
  editor = {Brito e Abreu, Fernando and Piattini, Mario and Poels, Geert and
	Sahraoui, Houari A.},
  address = {Darmstadt, Germany},
  month = jul,
  abstract = {It is a generally accepted fact that software systems are constructed
	and gradually refined over a period of time. During this time, code
	is written and modified until stable releases of the system emerge.
	Many researchers have studied systems over a longer period of time
	in order to understand how they change and evolve. Despite these
	efforts, we still lack a precise understanding how various properties
	of software change over time, in particular in the area of object-oriented
	systems. Such an understanding is of great importance if we want
	to come up with techniques to provide feedback on the evolution of
	quality and predictions about further evolution of software systems.
	Historically, collection of sufficient data to build useful models
	was not practical as source code and build histories were not freely
	available. It is our opinion that by focusing our attention towards
	Open source software repositories, we have a better hope building
	predictive models to help developers and managers. In this paper,
	we will report on our exploratory study analyzing Open source object
	oriented software projects and present a first predictive model based
	on this analysis},
  bdsk-file-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RApAAAAAAApAAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMb/ydVIKwAAAA+a5h9WYXNhMDMtRXZvbHV0aW9uIG9mICMxOTRCOUUucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGUuexvthVgAAAAAAAAAAAAIABQAACSAAAAAAAAAAAAAAAAAAAAAJRXZvbHV0aW9uAAAQAAgAAMb/LyUAAAARAAgAAMb6xqYAAAABABgAD5rmAA+azgAPl9wAD26uAA5LHAAOSKsAAgBmTWFjaW50b3NoIEhEOlVzZXJzOnJ2YXNhOkRvY3VtZW50czpSZXNlYXJjaDpQYXBlciBDb2xsZWN0aW9uOkV2b2x1dGlvbjpWYXNhMDMtRXZvbHV0aW9uIG9mICMxOTRCOUUucGRmAA4AlABJAFYAYQBzAGEAMAAzAC0ARQB2AG8AbAB1AHQAaQBvAG4AIABvAGYAIABDAHkAYwBsAG8AbQBhAHQAaQBjACAAQwBvAG0AcABsAGUAeABpAHQAeQAgAGkAbgAgAE8AYgBqAGUAYwB0ACAATwByAGkAZQBuAHQAZQBkACAAUwBvAGYAdAB3AGEAcgBlAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgCDVXNlcnMvcnZhc2EvRG9jdW1lbnRzL1Jlc2VhcmNoL1BhcGVyIENvbGxlY3Rpb24vRXZvbHV0aW9uL1Zhc2EwMy1Fdm9sdXRpb24gb2YgQ3ljbG9tYXRpYyBDb21wbGV4aXR5IGluIE9iamVjdCBPcmllbnRlZCBTb2Z0d2FyZS5wZGYAABMAAS8AABUAAgAM//8AAIAF0hwdHh9YJGNsYXNzZXNaJGNsYXNzbmFtZaMfICFdTlNNdXRhYmxlRGF0YVZOU0RhdGFYTlNPYmplY3RfEH0uLi8uLi9Eb2N1bWVudHMvUmVzZWFyY2gvUGFwZXIgQ29sbGVjdGlvbi9Fdm9sdXRpb24vVmFzYTAzLUV2b2x1dGlvbiBvZiBDeWNsb21hdGljIENvbXBsZXhpdHkgaW4gT2JqZWN0IE9yaWVudGVkIFNvZnR3YXJlLnBkZtIcHSQloiUhXE5TRGljdGlvbmFyeRIAAYagXxAPTlNLZXllZEFyY2hpdmVyAAgAEQAWAB8AKAAyADUAOgA8AEUASwBSAF0AZQBsAG8AcQBzAHYAeAB6AHwAhgCTAJgAoAM0AzYDOwNEA08DUwNhA2gDcQPxA/YD+QQGBAsAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAAEHQ==},
  bdsk-url-1 = {http://www.it.swin.edu.au/personal/jschneider/Pub/qaoose03.pdf},
  keywords = {olit selit metrics evolution qaoose03},
  location = {Privat},
  url = {http://www.it.swin.edu.au/personal/jschneider/Pub/qaoose03.pdf}
}

@INPROCEEDINGS{Vasa07b,
  author = {Rajesh Vasa and Jean-Guy Schneider and Oscar Nierstrasz},
  title = {{The Inevitable Stability of Software Change}},
  booktitle = {Proceedings of the 23rd IEEE International Conference on Software Maintenance (ICSM '07)},
  year = {2007},
  pages = {4-13},
  publisher = {IEEE Computer Society},
  abstract = {Real software systems change and become more complex over time. But
	whichparts change and which parts remain stable? Common wisdom, for
	example, states that in a well-designed object-oriented system, the
	more popular a class is, the less likely it is to change from one
	version to the next, since changes to this class are likely to impact
	its clients. We have studied consecutive releases of several public
	domain, object-oriented software systems and analyzed a number of
	measures indicative of size, popularity, and complexity of classes
	and interfaces. As it turns out, the distributions of these measures
	are remarkably stable as an application evolves. The distribution
	of class size and complexity retains its shape over time. Relatively
	little code is modified over time. Classes that tend to be modified,
	however, are also the more popular ones, that is, those with greater
	Fan-In. In general, the more complex a class or interface becomes,
	the more likely it is to change from one version to the next.},
  annote = {internationalconference},
  bdsk-file-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAlYAAAAAAlYAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMb/ydVIKwAAAA+a5h9WYXNhMDctVGhlIEluZXZpdGFibCMxOTRCQTEucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGUuhxvN1eQAAAAAAAAAAAAIABQAACSAAAAAAAAAAAAAAAAAAAAAJRXZvbHV0aW9uAAAQAAgAAMb/LyUAAAARAAgAAMby2skAAAABABgAD5rmAA+azgAPl9wAD26uAA5LHAAOSKsAAgBmTWFjaW50b3NoIEhEOlVzZXJzOnJ2YXNhOkRvY3VtZW50czpSZXNlYXJjaDpQYXBlciBDb2xsZWN0aW9uOkV2b2x1dGlvbjpWYXNhMDctVGhlIEluZXZpdGFibCMxOTRCQTEucGRmAA4AbgA2AFYAYQBzAGEAMAA3AC0AVABoAGUAIABJAG4AZQB2AGkAdABhAGIAbABlACAAUwB0AGEAYgBpAGwAaQB0AHkAIABvAGYAIABTAG8AZgB0AHcAYQByAGUAIABDAGgAYQBuAGcAZQAuAHAAZABmAA8AGgAMAE0AYQBjAGkAbgB0AG8AcwBoACAASABEABIAcFVzZXJzL3J2YXNhL0RvY3VtZW50cy9SZXNlYXJjaC9QYXBlciBDb2xsZWN0aW9uL0V2b2x1dGlvbi9WYXNhMDctVGhlIEluZXZpdGFibGUgU3RhYmlsaXR5IG9mIFNvZnR3YXJlIENoYW5nZS5wZGYAEwABLwAAFQACAAz//wAAgAXSHB0eH1gkY2xhc3Nlc1okY2xhc3NuYW1lox8gIV1OU011dGFibGVEYXRhVk5TRGF0YVhOU09iamVjdF8Qai4uLy4uL0RvY3VtZW50cy9SZXNlYXJjaC9QYXBlciBDb2xsZWN0aW9uL0V2b2x1dGlvbi9WYXNhMDctVGhlIEluZXZpdGFibGUgU3RhYmlsaXR5IG9mIFNvZnR3YXJlIENoYW5nZS5wZGbSHB0kJaIlIVxOU0RpY3Rpb25hcnkSAAGGoF8QD05TS2V5ZWRBcmNoaXZlcgAIABEAFgAfACgAMgA1ADoAPABFAEsAUgBdAGUAbABvAHEAcwB2AHgAegB8AIYAkwCYAKAC+gL8AwEDCgMVAxkDJwMuAzcDpAOpA6wDuQO+AAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAA9A=},
  bdsk-url-1 = {http://www.iam.unibe.ch/~scg/Archive/Papers/Vasa07bInevitableChange.pdf},
  bdsk-url-2 = {http://dx.doi.org/10.1109/ICSM.2007.4362613},
  city = {Paris, France},
  doi = {10.1109/ICSM.2007.4362613},
  keywords = {scg-pub jb08 snf08},
  peer = {yes},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Vasa07bInevitableChange.pdf}
}

@INPROCEEDINGS{Vasa08a,
  author = {Rajesh Vasa and Jean-Guy Schneider and Oscar Nierstrasz and Clinton
	Woodward},
  title = {{On the Resilience of Classes to Change}},
  booktitle = {Proceedings of the 3rd International ERCIM Symposium on Software Evolution
	(Software Evolution 2007)},
  year = {2008},
  editor = {Tom Mens and Maja D'Hondt and Kim Mens},
  volume = {8},
  publisher = {Electronic Communications of the EASST},
  abstract = {Software systems evolve over time incrementally and sections of code
	aremodified. But, how much does code really change? Lehman's laws
	suggest that software must be continuously adapted to be useful.
	We have studied the evolution of several public domain object-oriented
	software systems and analyzed the rate as well as the amount of change
	that individual classes undergo as they evolve. Our observations
	suggest that although classes are modified, the majority of changes
	are minor and only a small proportion of classes undergo significant
	modification. },
  annote = {internationalconference},
  bdsk-file-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAkgAAAAAAkgAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMb/ydVIKwAAAA+a5h9WYXNhMDgtT24gdGhlIFJlc2lsaSMxOTRCQTIucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGUuixvN1swAAAAAAAAAAAAIABQAACSAAAAAAAAAAAAAAAAAAAAAJRXZvbHV0aW9uAAAQAAgAAMb/LyUAAAARAAgAAMby2wMAAAABABgAD5rmAA+azgAPl9wAD26uAA5LHAAOSKsAAgBmTWFjaW50b3NoIEhEOlVzZXJzOnJ2YXNhOkRvY3VtZW50czpSZXNlYXJjaDpQYXBlciBDb2xsZWN0aW9uOkV2b2x1dGlvbjpWYXNhMDgtT24gdGhlIFJlc2lsaSMxOTRCQTIucGRmAA4AZAAxAFYAYQBzAGEAMAA4AC0ATwBuACAAdABoAGUAIABSAGUAcwBpAGwAaQBlAG4AYwBlACAAbwBmACAAQwBsAGEAcwBzAGUAcwAgAHQAbwAgAEMAaABhAG4AZwBlAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgBrVXNlcnMvcnZhc2EvRG9jdW1lbnRzL1Jlc2VhcmNoL1BhcGVyIENvbGxlY3Rpb24vRXZvbHV0aW9uL1Zhc2EwOC1PbiB0aGUgUmVzaWxpZW5jZSBvZiBDbGFzc2VzIHRvIENoYW5nZS5wZGYAABMAAS8AABUAAgAM//8AAIAF0hwdHh9YJGNsYXNzZXNaJGNsYXNzbmFtZaMfICFdTlNNdXRhYmxlRGF0YVZOU0RhdGFYTlNPYmplY3RfEGUuLi8uLi9Eb2N1bWVudHMvUmVzZWFyY2gvUGFwZXIgQ29sbGVjdGlvbi9Fdm9sdXRpb24vVmFzYTA4LU9uIHRoZSBSZXNpbGllbmNlIG9mIENsYXNzZXMgdG8gQ2hhbmdlLnBkZtIcHSQloiUhXE5TRGljdGlvbmFyeRIAAYagXxAPTlNLZXllZEFyY2hpdmVyAAgAEQAWAB8AKAAyADUAOgA8AEUASwBSAF0AZQBsAG8AcQBzAHYAeAB6AHwAhgCTAJgAoALsAu4C8wL8AwcDCwMZAyADKQORA5YDmQOmA6sAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAADvQ==},
  bdsk-url-1 = {http://eceasst.cs.tu-berlin.de/index.php/eceasst/article/view/121%20%20http://www.iam.unibe.ch/~scg/Archive/Papers/Vasa08aResilienceToChange.pdf},
  bdsk-url-2 = {http://eceasst.cs.tu-berlin.de/index.php/eceasst/article/view/121%20http://www.iam.unibe.ch/~scg/Archive/Papers/Vasa08aResilienceToChange.pdf},
  issn = {1863-2122},
  keywords = {scg-pub jb08 snf08},
  peer = {yes},
  url = {http://eceasst.cs.tu-berlin.de/index.php/eceasst/article/view/121 http://www.iam.unibe.ch/~scg/Archive/Papers/Vasa08aResilienceToChange.pdf}
}

@INPROCEEDINGS{Vasa05a,
  author = {Rajesh Vasa and Jean-Guy Schneider and Clinton Woodward and Andrew
	Cain},
  title = {{Detecting Structural Changes in Object-Oriented Software Systems}},
  booktitle = {Proceedings of the 4th International Symposium on Empirical Software
	Engineering (ISESE '05)},
  year = {2005},
  editor = {Verner, June and Travassos, Guilherme H.},
  pages = {463--470},
  address = {Noosa Heads, Australia},
  month = nov,
  publisher = {IEEE Computer Society Press},
  abstract = {It is an increasingly accepted fact that software development is a
	non-linear activity with inherently feedback driven processes. In
	such a development environment, however, it is important that major
	structural changes in the design and/or architecture of a software
	system under development are introduced with care and documented
	accordingly. In order to give developers appropriate tools that can
	identify such changes, we need to have a good understanding how software
	systems evolve over time so that evolutionary anomalies can be automatically
	detected. In this paper, we present recurring high-level structural
	and evolutionary patterns that we have observed in a number of public-domain
	object-oriented software systems and define a simple predictive model
	that can aid developers in detecting structural changes and, as a
	consequence, improve the underlying development processes.},
  bdsk-file-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RApYAAAAAApYAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMb/ydVIKwAAAA+a5h9WYXNhMDUtRGV0ZWN0aW5nIFN0ciMxOTRCOUYucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGUufxvN1cwAAAAAAAAAAAAIABQAACSAAAAAAAAAAAAAAAAAAAAAJRXZvbHV0aW9uAAAQAAgAAMb/LyUAAAARAAgAAMby2sMAAAABABgAD5rmAA+azgAPl9wAD26uAA5LHAAOSKsAAgBmTWFjaW50b3NoIEhEOlVzZXJzOnJ2YXNhOkRvY3VtZW50czpSZXNlYXJjaDpQYXBlciBDb2xsZWN0aW9uOkV2b2x1dGlvbjpWYXNhMDUtRGV0ZWN0aW5nIFN0ciMxOTRCOUYucGRmAA4AmABLAFYAYQBzAGEAMAA1AC0ARABlAHQAZQBjAHQAaQBuAGcAIABTAHQAcgB1AGMAdAB1AHIAYQBsACAAQwBoAGEAbgBnAGUAcwAgAGkAbgAgAE8AYgBqAGUAYwB0ACAATwByAGkAZQBuAHQAZQBkACAAUwBvAGYAdAB3AGEAcgBlACAAUwB5AHMAdABlAG0AcwAuAHAAZABmAA8AGgAMAE0AYQBjAGkAbgB0AG8AcwBoACAASABEABIAhVVzZXJzL3J2YXNhL0RvY3VtZW50cy9SZXNlYXJjaC9QYXBlciBDb2xsZWN0aW9uL0V2b2x1dGlvbi9WYXNhMDUtRGV0ZWN0aW5nIFN0cnVjdHVyYWwgQ2hhbmdlcyBpbiBPYmplY3QgT3JpZW50ZWQgU29mdHdhcmUgU3lzdGVtcy5wZGYAABMAAS8AABUAAgAM//8AAIAF0hwdHh9YJGNsYXNzZXNaJGNsYXNzbmFtZaMfICFdTlNNdXRhYmxlRGF0YVZOU0RhdGFYTlNPYmplY3RfEH8uLi8uLi9Eb2N1bWVudHMvUmVzZWFyY2gvUGFwZXIgQ29sbGVjdGlvbi9Fdm9sdXRpb24vVmFzYTA1LURldGVjdGluZyBTdHJ1Y3R1cmFsIENoYW5nZXMgaW4gT2JqZWN0IE9yaWVudGVkIFNvZnR3YXJlIFN5c3RlbXMucGRm0hwdJCWiJSFcTlNEaWN0aW9uYXJ5EgABhqBfEA9OU0tleWVkQXJjaGl2ZXIACAARABYAHwAoADIANQA6ADwARQBLAFIAXQBlAGwAbwBxAHMAdgB4AHoAfACGAJMAmACgAzoDPANBA0oDVQNZA2cDbgN3A/kD/gQBBA4EEwAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAAQl},
  bdsk-url-1 = {http://www.it.swin.edu.au/personal/jschneider/Pub/isese05.pdf},
  bdsk-url-2 = {http://dx.doi.org/10.1109/ISESE.2005.1541855},
  doi = {10.1109/ISESE.2005.1541855},
  issn_isbn = {ISBN 0-7803-9507-7},
  keywords = {olit selit metrics evolution isese05 cecses-pub},
  location = {Privat},
  url = {http://www.it.swin.edu.au/personal/jschneider/Pub/isese05.pdf}
}

@BOOK{Weinberg98a,
  title = {{The Psychology of Computer Programming}},
  publisher = {Dorset House},
  year = {1998},
  author = {Gerald M. Weinberg},
  edition = {Silver Anniversary Edition},
  keywords = {scglib}
}

@CONFERENCE{Wettel07a,
  author = {Wettel, R. and Lanza, M.},
  title = {{Visualizing Software Systems as Cities}},
  booktitle = {4th IEEE International Workshop on Visualizing Software for Understanding and Analysis (VisSOFT 2007)},
  year = {2007},
  pages = {92--99}
}

@CONFERENCE{Wheeldon03a,
  author = {Wheeldon, R. and Counsell, S.},
  title = {{Power Law Distributions in Class Relationships}},
  booktitle = {Proceedings of the 3rd IEEE International Workshop on Source Code Analysis and Manipulation (2003)},
  year = {2003},
  pages = {45--54}
}

@ARTICLE{Wiley98a,
  author = {Wiley, Edward},
  title = {{Entropy, Information, and Evolution}},
  journal = {Massachusetts Institute of Technology},
  year = {1998}
}

@ARTICLE{Williams03a,
  author = {Williams, L. and Cockburn, A.},
  title = {{Agile Software Development: It's About Feedback and Change}},
  journal = {Computer},
  year = {2003},
  volume = {36},
  pages = {39--43},
  number = {6}
}

@CONFERENCE{Wirfs89a,
  author = {Wirfs-Brock, R. and Wilkerson, B.},
  title = {{Object-Oriented Design: A Responsibility-Driven Approach}},
  booktitle = {Conference on Object Oriented Programming Systems Languages and Applications},
  year = {1989},
  pages = {71--75},
  organization = {ACM New York, NY, USA}
}

@ARTICLE{Wirfs98a,
  author = {Wirfs-Brock, R. and Wilkerson, B.},
  title = {{Object-Oriented Design: A Responsibility-Driven Approach}},
  journal = {ACM SIGPLAN Notices},
  year = {1989},
  volume = {24},
  pages = {71--75},
  number = {10},
  publisher = {ACM New York, NY, USA}
}

@PHDTHESIS{Wu06a,
  author = {Wu, J.},
  title = {{Open Source Software Evolution and Its Dynamics}},
  school = {University of Waterloo},
  year = {2006}
}

@CONFERENCE{Wu07a,
  author = {Wu, J. and Holt, RC and Hassan, AE},
  title = {{Empirical Evidence for SOC Dynamics in Software Evolution}},
  booktitle = {IEEE International Conference on Software Maintenance (ICSM 2007)},
  year = {2007},
  pages = {244--254}
}

@INPROCEEDINGS{WuSpitzer04a,
  author = {Wu, J. and Spitzer, CW and Hassan, AE and Holt, RC},
  title = {{Evolution Spectrographs: Visualizing Punctuated Change in Software Evolution}},
  booktitle = {Proceedings of the 7th International Workshop on Principles of Software Evolution (2004)},
  year = {2004},
  pages = {57--66}
}

@INPROCEEDINGS{Xie09a,
  author = {Xie, G. and Chen, J. and Neamtiu, I.},
  title = {{Towards a Better Understanding of Software Evolution: An Empirical Study on Open Source Software}},
  booktitle = {Proceedings of the International Conference on Software Maintenance (ICSM 2009)},
  year = {2009},
  publisher = {IEEE}
}

@UNPUBLISHED{Xu04a,
  author = {Xu, Kuan},
  title = {{How Has the Literature on Gini's Index Evolved in the Past 80 Years?}},
  note = {Department of Economics, Dalhouse University, Halifax, Nova Scotia},
  month = dec,
  year = {2004},
  abstract = {The Gini coefficient or index is perhaps one of the most used indicators
	of social and economic conditions. From its first proposal in English
	in 1921 to the present, a large number of papers on the Gini index
	has been written and published. Going through these papers represents
	a demanding task. The aim of this survey paper is to help the reader
	to navigate through the major developments of the literature and
	to incorporate recent theoretical research results with a particular
	focus on different formulations and interpretations of the Gini index,
	its social welfare implication, and source and subgroup decomposition.},
  bdsk-url-1 = {http://economics.dal.ca/RePEc/dal/wparch/howgini.pdf},
  keywords = {olit evolution gini},
  url = {http://economics.dal.ca/RePEc/dal/wparch/howgini.pdf}
}

@ARTICLE{Ying04a,
  author = {Annie T.T. Ying and Gail C. Murphy and Raymond Ng and Mark C. Chu-Carroll},
  title = {{Predicting Source Code Changes by Mining Change History}},
  journal = {IEEE Transactions on Software Engineering},
  year = {2004},
  volume = {30},
  pages = {574-586},
  number = {9},
  address = {Los Alamitos, CA, USA},
  bdsk-file-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RApIAAAAAApIAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMb/ydVIKwAAAA+a5h9ZaW5nMDQgLSBUU0UgLSBQcmVkaWMjRjlDNjcucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD5xnxJ1IGgAAAAAAAAAAAAIABQAACSAAAAAAAAAAAAAAAAAAAAAJRXZvbHV0aW9uAAAQAAgAAMb/LyUAAAARAAgAAMScu3oAAAABABgAD5rmAA+azgAPl9wAD26uAA5LHAAOSKsAAgBmTWFjaW50b3NoIEhEOlVzZXJzOnJ2YXNhOkRvY3VtZW50czpSZXNlYXJjaDpQYXBlciBDb2xsZWN0aW9uOkV2b2x1dGlvbjpZaW5nMDQgLSBUU0UgLSBQcmVkaWMjRjlDNjcucGRmAA4AlgBKAFkAaQBuAGcAMAA0ACAALQAgAFQAUwBFACAALQAgAFAAcgBlAGQAaQBjAHQAaQBuAGcAIABTAG8AdQByAGMAZQAgAEMAbwBkAGUAIABDAGgAYQBuAGcAZQBzACAAYgB5ACAATQBpAG4AaQBuAGcAIABDAGgAYQBuAGcAZQAgAEgAaQBzAHQAbwByAHkALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAIRVc2Vycy9ydmFzYS9Eb2N1bWVudHMvUmVzZWFyY2gvUGFwZXIgQ29sbGVjdGlvbi9Fdm9sdXRpb24vWWluZzA0IC0gVFNFIC0gUHJlZGljdGluZyBTb3VyY2UgQ29kZSBDaGFuZ2VzIGJ5IE1pbmluZyBDaGFuZ2UgSGlzdG9yeS5wZGYAEwABLwAAFQACAAz//wAAgAXSHB0eH1gkY2xhc3Nlc1okY2xhc3NuYW1lox8gIV1OU011dGFibGVEYXRhVk5TRGF0YVhOU09iamVjdF8Qfi4uLy4uL0RvY3VtZW50cy9SZXNlYXJjaC9QYXBlciBDb2xsZWN0aW9uL0V2b2x1dGlvbi9ZaW5nMDQgLSBUU0UgLSBQcmVkaWN0aW5nIFNvdXJjZSBDb2RlIENoYW5nZXMgYnkgTWluaW5nIENoYW5nZSBIaXN0b3J5LnBkZtIcHSQloiUhXE5TRGljdGlvbmFyeRIAAYagXxAPTlNLZXllZEFyY2hpdmVyAAgAEQAWAB8AKAAyADUAOgA8AEUASwBSAF0AZQBsAG8AcQBzAHYAeAB6AHwAhgCTAJgAoAM2AzgDPQNGA1EDVQNjA2oDcwP0A/kD/AQJBA4AAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAAEIA==},
  bdsk-url-1 = {http://doi.ieeecomputersociety.org/10.1109/TSE.2004.52},
  doi = {http://doi.ieeecomputersociety.org/10.1109/TSE.2004.52},
  issn = {0098-5589},
  publisher = {IEEE Computer Society}
}

@CONFERENCE{Yuen87a,
  author = {Yuen, C.K.S.C.H.},
  title = {{A Statistical Rationale for Evolution Dynamics Concepts}},
  journal = {ICSM IEEE Conference on Software Maintenance, Austin, TX},
  year = {1987},
  pages = {235--251}
}

@ARTICLE{Zhou06a,
  author = {Zhou, Y. and Leung, H.},
  title = {{Empirical Analysis of Object-Oriented Design Metrics for Predicting
	High and Low Severity Faults}},
  journal = {IEEE Transactions on Software Engineering},
  year = {2006},
  volume = {32},
  pages = {771--789},
  number = {10}
}

@ARTICLE{Zhou09a,
  author = {Zhou, Y. and Xu, B. and Leung, H.},
  title = {{On the Ability of Complexity Metrics to Predict Fault-Prone Classes
	in Object-Oriented Systems}},
  journal = {The Journal of Systems and Software},
  year = {2009},
  publisher = {Elsevier}
}

@CONFERENCE{Zimmermann05b,
  author = {Zimmermann, T. and Dallmeier, V. and Halachev, K. and Zeller, A.},
  title = {{eROSE: Guiding Programmers in Eclipse}},
  booktitle = {Companion to the 20th Annual ACM SIGPLAN Conference on Object-Oriented
	Programming, Systems, Languages, and Applications},
  year = {2005},
  pages = {187},
  organization = {ACM}
}

@INPROCEEDINGS{Zimmermann03a,
  author = {Zimmermann, T. and Diehl, S. and Zeller, A.},
  title = {{How History Justifies System Architecture (Or Not)}},
  booktitle = {Proceedings of the Sixth International Workshop on Principles of Software Evolution (2003)},
  year = {2003},
  pages = {73-83},
  month = {Sept.},
  abstract = {The revision history of a software system conveys important information
	about how and why the system evolved in time. The revision history
	can also tell us which parts of the system are coupled by common
	changes: whenever the database schema was changed, the sqlquery method
	was altered, too. This evolutionary coupling can be compared with
	the coupling as imposed by the system architecture; differences indicate
	anomalies which may be subject to restructuring. Our ROSE prototype
	analyzes fine-grained coupling between software entities as indicated
	by common changes. It turns out that common changes are a good indicator
	for modularity, that evolutionary coupling should be determined between
	syntactical entities (rather than files or modules), and that common
	changes can indicate coupling between software entities and nonprogram
	artifacts that is unavailable to the analysis of a single version.},
  bdsk-file-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAlQAAAAAAlQAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMb/ydVIKwAAAA+a5h9aaW1tZXJtYW5uMDMgLSBIb3cgSGkjRjlDNkIucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD5xrxJ1KVgAAAAAAAAAAAAIABQAACSAAAAAAAAAAAAAAAAAAAAAJRXZvbHV0aW9uAAAQAAgAAMb/LyUAAAARAAgAAMScvbYAAAABABgAD5rmAA+azgAPl9wAD26uAA5LHAAOSKsAAgBmTWFjaW50b3NoIEhEOlVzZXJzOnJ2YXNhOkRvY3VtZW50czpSZXNlYXJjaDpQYXBlciBDb2xsZWN0aW9uOkV2b2x1dGlvbjpaaW1tZXJtYW5uMDMgLSBIb3cgSGkjRjlDNkIucGRmAA4AbAA1AFoAaQBtAG0AZQByAG0AYQBuAG4AMAAzACAALQAgAEgAbwB3ACAASABpAHMAdABvAHIAeQAgAEoAdQBzAHQAaQBmAGkAZQBzACAAQQByAGMAaABpAHQAZQBjAHQAdQByAGUALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAG9Vc2Vycy9ydmFzYS9Eb2N1bWVudHMvUmVzZWFyY2gvUGFwZXIgQ29sbGVjdGlvbi9Fdm9sdXRpb24vWmltbWVybWFubjAzIC0gSG93IEhpc3RvcnkgSnVzdGlmaWVzIEFyY2hpdGVjdHVyZS5wZGYAABMAAS8AABUAAgAM//8AAIAF0hwdHh9YJGNsYXNzZXNaJGNsYXNzbmFtZaMfICFdTlNNdXRhYmxlRGF0YVZOU0RhdGFYTlNPYmplY3RfEGkuLi8uLi9Eb2N1bWVudHMvUmVzZWFyY2gvUGFwZXIgQ29sbGVjdGlvbi9Fdm9sdXRpb24vWmltbWVybWFubjAzIC0gSG93IEhpc3RvcnkgSnVzdGlmaWVzIEFyY2hpdGVjdHVyZS5wZGbSHB0kJaIlIVxOU0RpY3Rpb25hcnkSAAGGoF8QD05TS2V5ZWRBcmNoaXZlcgAIABEAFgAfACgAMgA1ADoAPABFAEsAUgBdAGUAbABvAHEAcwB2AHgAegB8AIYAkwCYAKAC+AL6Av8DCAMTAxcDJQMsAzUDoQOmA6kDtgO7AAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAA80=},
  bdsk-url-1 = {http://dx.doi.org/10.1109/IWPSE.2003.1231213},
  doi = {10.1109/IWPSE.2003.1231213},
  keywords = {SQL, program diagnostics, query processing, software architecture,
	software prototyping ROSE prototype, database schema, evolutionary
	coupling, fine-grained coupling, nonprogram artifacts, revision history,
	software entities, software system, sqlquery() method, syntactical
	entities, system architecture}
}

@INPROCEEDINGS{Zimmermann08a,
  author = {Zimmermann, T. and Nagappan, N.},
  title = {{Predicting Defects Using Network Analysis on Dependency Graphs}},
  booktitle = {Proceedings of the 30th International Conference on Software Engineering},
  year = {2008},
  pages = {531--540},
  organization = {ACM New York, NY, USA}
}

@INPROCEEDINGS{Zimmermann07a,
  author = {Zimmermann, T. and Premraj, R. and Zeller, A.},
  title = {{Predicting Defects for Eclipse}},
  booktitle = {Proceedings of the Third International Workshop on Predictor Models
	in Software Engineering},
  year = {2007},
  pages = {9},
  organization = {IEEE Computer Society}
}

@ARTICLE{Zimmermann05a,
  author = {Thomas Zimmermann and Peter Weissgerber and Stephan Diehl and Andreas
	Zeller},
  title = {{Mining Version Histories to Guide Software Changes}},
  journal = {IEEE Transactions on Software Engineering},
  year = {2005},
  volume = {31},
  pages = {429-445},
  number = {6},
  abstract = {We apply data mining to version histories in order to guide programmers
	along related changes: Programmers who changed these functions also
	changed.... Given a set of existing changes, the mined association
	rules 1. suggest and predict likely further changes, 2. show up item
	coupling that is undetectable by program analysis, and 3. can prevent
	errors due to incomplete changes. After an initial change, our ROSE
	prototype can correctly predict further locations to be changed;
	the best predictive power is obtained for changes to existing software.
	In our evaluation based on the history of eight popular open source
	projects, ROSE's topmost three suggestions contained a correct location
	with a likelihood of more than 70 percent.},
  address = {Los Alamitos, CA, USA},
  bdsk-file-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAoAAAAAAAoAAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMb/ydVIKwAAAA+a5h9aaW1tZXJtYW5uMDQgLSBNaW5pbmcjRjlDNkMucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD5xsxH3E/QAAAAAAAAAAAAIABQAACSAAAAAAAAAAAAAAAAAAAAAJRXZvbHV0aW9uAAAQAAgAAMb/LyUAAAARAAgAAMR9OF0AAAABABgAD5rmAA+azgAPl9wAD26uAA5LHAAOSKsAAgBmTWFjaW50b3NoIEhEOlVzZXJzOnJ2YXNhOkRvY3VtZW50czpSZXNlYXJjaDpQYXBlciBDb2xsZWN0aW9uOkV2b2x1dGlvbjpaaW1tZXJtYW5uMDQgLSBNaW5pbmcjRjlDNkMucGRmAA4AigBEAFoAaQBtAG0AZQByAG0AYQBuAG4AMAA0ACAALQAgAE0AaQBuAGkAbgBnACAAVgBlAHIAcwBpAG8AbgAgAEgAaQBzAHQAbwByAGkAZQBzACAAdABvACAARwB1AGkAZABlACAAQwBoAGEAbgBnAGUAIAAtACAAaQBjAHMAZQAwADQALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAH5Vc2Vycy9ydmFzYS9Eb2N1bWVudHMvUmVzZWFyY2gvUGFwZXIgQ29sbGVjdGlvbi9Fdm9sdXRpb24vWmltbWVybWFubjA0IC0gTWluaW5nIFZlcnNpb24gSGlzdG9yaWVzIHRvIEd1aWRlIENoYW5nZSAtIGljc2UwNC5wZGYAEwABLwAAFQACAAz//wAAgAXSHB0eH1gkY2xhc3Nlc1okY2xhc3NuYW1lox8gIV1OU011dGFibGVEYXRhVk5TRGF0YVhOU09iamVjdF8QeC4uLy4uL0RvY3VtZW50cy9SZXNlYXJjaC9QYXBlciBDb2xsZWN0aW9uL0V2b2x1dGlvbi9aaW1tZXJtYW5uMDQgLSBNaW5pbmcgVmVyc2lvbiBIaXN0b3JpZXMgdG8gR3VpZGUgQ2hhbmdlIC0gaWNzZTA0LnBkZtIcHSQloiUhXE5TRGljdGlvbmFyeRIAAYagXxAPTlNLZXllZEFyY2hpdmVyAAgAEQAWAB8AKAAyADUAOgA8AEUASwBSAF0AZQBsAG8AcQBzAHYAeAB6AHwAhgCTAJgAoAMkAyYDKwM0Az8DQwNRA1gDYQPcA+ED5APxA/YAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAAECA==},
  bdsk-url-1 = {http://doi.ieeecomputersociety.org/10.1109/TSE.2005.72},
  doi = {http://doi.ieeecomputersociety.org/10.1109/TSE.2005.72},
  issn = {0098-5589},
  publisher = {IEEE Computer Society}
}

@INPROCEEDINGS{Zimmermann04a,
  author = {Zimmermann, T. and Wei{\ss}gerber, P.},
  title = {{Preprocessing CVS Data for Fine-Grained Analysis}},
  booktitle = {Proceedings of the International Workshop on Mining Software Repositories (MSR 2004)},
  year = {2004},
  pages = {2--6}
}

@INPROCEEDINGS{Zimmermann04b,
  author = {Thomas Zimmermann and Peter Wei{\ss}gerber and Stephan Diehl and
	Andreas Zeller},
  title = {{Mining Version Histories to Guide Software Changes}},
  booktitle = {Proceedings of the 26th International Conference on Software Engineering (ICSE 2004)},
  year = {2004},
  pages = {563-572},
  address = {Los Alamitos CA},
  publisher = {IEEE Computer Society Press},
  bdsk-url-1 = {http://www.st.cs.uni-sb.de/papers/icse2004/icse.pdf},
  keywords = {evolution clustering},
  url = {http://www.st.cs.uni-sb.de/papers/icse2004/icse.pdf}
}

@BOOK{Madhavji06a,
  title = {{Software Evolution and Feedback: Theory and Practice}},
  publisher = {Hoboken, NJ: John Wiley \& Sons},
  year = {2006},
  editor = {Madhavji, N.H. and Fern{\'a}ndez-Ramil, J.C. and Perry, D.E.}
}

@BOOK{Mens08b,
  title = {{Software Evolution}},
  publisher = {Springer},
  year = {2008},
  editor = {Tom Mens and Serge Demeyer},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  ee = {http://dx.doi.org/10.1007/978-3-540-76440-3},
  isbn = {978-3-540-76439-7}
}

@MANUAL{IEEE1061,
  title = {{IEEE Standard for a Software Quality Metrics Methodology}},
  organization = {IEEE Standard 1061-1998},
  year = {1998},
  editor = {Celia Modell}
}

@MISC{ASM10a,
  title = {{ASM - Bytecode Analysis and Manipulation Framework}},
  howpublished = {\url{http://asm.ow2.org/}},
  year = {2010},
  key = {ASM10a},
  url = {http://asm.ow2.org/}
}

@MISC{Javac10a,
  title = {{Java Compiler Usage Guide}},
  howpublished = {\url{http://java.sun.com/javase/7/docs/technotes/tools/windows/javac.html}},
  year = {2010},
  key = {Javac10a},
  url = {http://java.sun.com/javase/7/docs/technotes/tools/windows/javac.html}
}



@MISC{Classycle10a,
  title = {{Classycle Dependency Analyzer, Classycle Project}},
  howpublished = {\url{http://classycle.sourceforge.net/}},
  year = {2010},
  key = {ClassycleProject}
}

@MISC{Codeswat10a,
  title = {{Analyst4J by Codeswat Incorporated}},
  howpublished = {\url{http://www.codeswat.com/}},
  year = {2010},
  key = {CodeswatIncorporated}
}

@MISC{EssentialMetrics10a,
  title = {{Krakatau Essential Metrics, Power Software Incorporated}},
  howpublished = {\url{http://www.powersoftware.com/em/}},
  year = {2010},
  key = {PowerSoftwareIncorporated}
}

@MISC{JHawk10a,
  title = {{JHawk Java Metric Analyzer, Virtual Machinery}},
  howpublished = {\url{http://www.virtualmachinery.com/jhawkprod.htm}},
  year = {2010},
  key = {VirtualMachinery}
}

@MISC{Metrics10a,
  title = {{Metrics Plugin for Eclipse IDE}},
  howpublished = {\url{http://metrics.sourceforge.net/}},
  year = {2010},
  key = {Metrics10a}
}

@MISC{RSM10a,
  title = {{RSM Tool, M-Squared Technologies}},
  howpublished = {\url{http://msquaredtechnologies.com/}},
  year = {2010},
  key = {MSquaredTechnologies}
}

@MISC{Semantic10a,
  title = {{Semantic Design Metric Tool, Semantic Design Incorporated}},
  howpublished = {\url{http://www.semdesigns.com/products/metrics/index.html}},
  year = {2010},
  key = {Semantic10a}
}

@MISC{Testwell10a,
  title = {{Testwell CMT++}},
  howpublished = {\url{http://www.testwell.fi/}},
  year = {2010},
  key = {TestwellOy}
}

@MISC{Verybench10a,
  title = {{Verybench Code Metrics, Verysoft Incorporated}},
  howpublished = {\url{http://www.verifysoft.com/en_cmtx_verybench.html}},
  year = {2010},
  key = {VeryBench10}
}

@MISC{ChangeDefinition09a,
  title = {{Dictionary.com Unabridged (v 1.1)}},
  howpublished = {\url{http://dictionary.reference.com/browse/change}},
  month = {Feb},
  year = {2009},
  bdsk-url-1 = {http://dictionary.reference.com/browse/change},
  day = {17},
  key = {ChangeDefinition},
  url = {http://dictionary.reference.com/browse/change}
}

@MISC{Itext09a,
  title = {{iText PDF Library Release Notes}},
  howpublished = {\url{http://www.1t3xt.com/about/history.php}},
  year = {2009},
  bdsk-url-1 = {http://www.1t3xt.com/about/history.php},
  key = {itext},
  url = {http://www.1t3xt.com/about/history.php}
}

@MISC{JSeat08a,
  title = {{JSeat}},
  howpublished = {\url{http://code.google.com/p/jseat}},
  year = {2008},
  bdsk-url-1 = {http://code.google.com/p/jseat},
  date-modified = {2009-11-11 15:21:05 +1100},
  key = {jseat},
  url = {http://code.google.com/p/jseat}
}

@MISC{Xalan07a,
  title = {{Xalan XSLT Library Release Notes}},
  howpublished = {\url{http://xml.apache.org/xalan-j/readme.html}},
  year = {2007},
  bdsk-url-1 = {http://xml.apache.org/xalan-j/readme.html},
  date-modified = {2009-11-11 15:19:11 +1100},
  key = {Xalana},
  url = {http://xml.apache.org/xalan-j/readme.html}
}

@MISC{Xalan07b,
  title = {{Xalan XSLT Library Developer Documentation}},
  howpublished = {\url{http://xml.apache.org/xalan-j/xsltc/index.html}},
  year = {2007},
  bdsk-url-1 = {http://xml.apache.org/xalan-j/xsltc/index.html},
  date-modified = {2009-11-11 15:20:07 +1100},
  key = {Xalanb},
  url = {http://xml.apache.org/xalan-j/xsltc/index.html}
}

@MISC{Axis05a,
  title = {{Architecture Guide for the Axis Web Services Engine (http://ws.apache.org/axis/java/architecture-guide.html)}},
  howpublished = {\url{http://ws.apache.org/axis/java/architecture-guide.html}},
  year = {2005},
  bdsk-url-1 = {http://ws.apache.org/axis/java/architecture-guide.html},
  date-modified = {2009-11-11 15:16:07 +1100},
  key = {Axis},
  rating = {4},
  read = {Yes},
  url = {http://ws.apache.org/axis/java/architecture-guide.html}
}

@MANUAL{ECMA05a,
  title = {{Standard ECMA-334: C\# Language Specification}},
  organization = {{European Computer Machinery Association}},
  edition = {Third},
  month = jun,
  year = {2005},
  key = {ECMA334}
}

@MISC{GoogLib09a,
  title = {{Google Collections Library}},
  howpublished = {\url{http://code.google.com/p/google-collections/}},
  year = {2001},
  bdsk-url-1 = {http://code.google.com/p/google-collections/},
  date-modified = {2009-11-11 15:19:55 +1100},
  key = {GoogLib09a},
  url = {http://code.google.com/p/google-collections/}
}

@MISC{Trove09a,
  title = {{Trove High Performance Java Collections Classes}},
  howpublished = {\url{http://trove4j.sourceforge.net/}},
  year = {2001},
  bdsk-url-1 = {http://trove4j.sourceforge.net/},
  date-modified = {2009-11-11 15:19:55 +1100},
  key = {Trove09a},
  url = {http://trove4j.sourceforge.net/}
}

@MISC{Xerces01a,
  title = {{Xerces XML Library Release Notes}},
  howpublished = {\url{http://xerces.apache.org/xerces-j/releases.html}},
  year = {2001},
  bdsk-url-1 = {http://xerces.apache.org/xerces-j/releases.html},
  date-modified = {2009-11-11 15:19:55 +1100},
  key = {Xerces},
  url = {http://xerces.apache.org/xerces-j/releases.html}
}

